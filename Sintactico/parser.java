
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.ObjectOutputStream;
import java.io.FileOutputStream;
import org.json.simple.*;
import org.json.simple.parser.*;
import arbol.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\030\013\000\002\002\004\000\002\030" +
    "\013\000\002\030\013\000\002\030\011\000\002\033\004" +
    "\000\002\033\004\000\002\033\002\000\002\032\013\000" +
    "\002\032\013\000\002\032\013\000\002\032\014\000\002" +
    "\031\015\000\002\031\015\000\002\031\015\000\002\031" +
    "\015\000\002\031\015\000\002\031\015\000\002\031\015" +
    "\000\002\034\005\000\002\034\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\004\000\002" +
    "\036\004\000\002\036\004\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\035\005\000\002\035\007" +
    "\000\002\035\006\000\002\035\005\000\002\035\007\000" +
    "\002\035\006\000\002\035\005\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\003\000\002\015\004\000\002\015\002\000\002\016" +
    "\006\000\002\016\003\000\002\017\006\000\002\017\010" +
    "\000\002\017\006\000\002\020\006\000\002\020\006\000" +
    "\002\021\012\000\002\021\012\000\002\021\012\000\002" +
    "\021\012\000\002\021\012\000\002\022\011\000\002\022" +
    "\006\000\002\023\006\000\002\023\010\000\002\023\006" +
    "\000\002\023\006\000\002\024\006\000\002\024\010\000" +
    "\002\024\012\000\002\024\006\000\002\024\010\000\002" +
    "\024\010\000\002\024\010\000\002\025\004\000\002\026" +
    "\005\000\002\026\005\000\002\040\006\000\002\040\002" +
    "\000\002\041\004\000\002\041\003\000\002\042\011\000" +
    "\002\043\004\000\002\043\002\000\002\006\004\000\002" +
    "\006\004\000\002\006\002\000\002\027\005\000\002\027" +
    "\005\000\002\027\007\000\002\027\007\000\002\002\003" +
    "\000\002\003\005\000\002\003\003\000\002\005\005\000" +
    "\002\005\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\005\000\002\004\003\000\002\004\005\000\002\004" +
    "\003\000\002\011\003\000\002\013\005\000\002\013\003" +
    "\000\002\012\005\000\002\012\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\004\000\002\007\004\000\002" +
    "\007\005\000\002\007\006\000\002\007\003\000\002\007" +
    "\004\000\002\007\003\000\002\010\005\000\002\010\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014d\000\004\007\005\001\002\000\004\002\u014f\001" +
    "\002\000\006\003\007\051\006\001\002\000\020\003\uffae" +
    "\010\uffae\011\uffae\013\uffae\014\010\015\uffae\051\uffae\001" +
    "\002\000\016\010\uffae\011\uffae\013\uffae\014\010\015\uffae" +
    "\051\uffae\001\002\000\004\051\u0137\001\002\000\014\010" +
    "\uffa6\011\uffa6\013\012\015\uffa6\051\uffa6\001\002\000\004" +
    "\051\014\001\002\000\012\010\022\011\017\015\ufffa\051" +
    "\014\001\002\000\006\040\u0131\052\u012f\001\002\000\012" +
    "\003\ufffa\010\022\011\017\015\ufffa\001\002\000\014\003" +
    "\uffa8\010\uffa8\011\uffa8\015\uffa8\051\uffa8\001\002\000\004" +
    "\051\u0114\001\002\000\004\015\u0110\001\002\000\012\003" +
    "\ufffa\010\022\011\017\015\ufffa\001\002\000\006\003\024" +
    "\051\023\001\002\000\004\026\350\001\002\000\004\026" +
    "\025\001\002\000\010\003\030\031\027\051\026\001\002" +
    "\000\006\040\342\052\341\001\002\000\004\040\332\001" +
    "\002\000\006\040\324\052\323\001\002\000\004\040\032" +
    "\001\002\000\016\003\035\041\041\042\040\043\037\045" +
    "\034\051\033\001\002\000\022\003\uffd8\013\uffd8\015\uffd8" +
    "\031\uffd8\040\uffd8\051\uffd8\052\uffd8\054\uffd8\001\002\000" +
    "\022\003\uffd9\013\uffd9\015\uffd9\031\uffd9\040\uffd9\051\uffd9" +
    "\052\uffd9\054\uffd9\001\002\000\022\003\uffd7\013\uffd7\015" +
    "\uffd7\031\uffd7\040\uffd7\051\uffd7\052\uffd7\054\uffd7\001\002" +
    "\000\010\013\012\015\uffa6\051\uffa6\001\002\000\022\003" +
    "\uffda\013\uffda\015\uffda\031\uffda\040\uffda\051\uffda\052\uffda" +
    "\054\uffda\001\002\000\022\003\uffdb\013\uffdb\015\uffdb\031" +
    "\uffdb\040\uffdb\051\uffdb\052\uffdb\054\uffdb\001\002\000\022" +
    "\003\uffdc\013\uffdc\015\uffdc\031\uffdc\040\uffdc\051\uffdc\052" +
    "\uffdc\054\uffdc\001\002\000\006\015\043\051\014\001\002" +
    "\000\024\003\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\027\uffcc\030\uffcc\051\uffcc\001\002\000\024\003\061" +
    "\016\051\017\065\020\050\021\066\022\053\027\045\030" +
    "\054\051\055\001\002\000\006\003\310\026\311\001\002" +
    "\000\026\002\uffcd\003\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\027\uffcd\030\uffcd\051\uffcd\001\002\000\004" +
    "\054\307\001\002\000\022\003\113\005\102\006\114\024" +
    "\103\025\110\026\111\051\112\055\115\001\002\000\004" +
    "\054\301\001\002\000\004\054\300\001\002\000\022\003" +
    "\113\005\102\006\114\024\103\025\110\026\111\051\112" +
    "\055\115\001\002\000\006\003\245\026\246\001\002\000" +
    "\010\026\145\037\235\053\236\001\002\000\032\002\uffd3" +
    "\003\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\027\uffd3\030\uffd3\050\uffd3\051\uffd3\001\002\000\032" +
    "\002\uffd6\003\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\027\uffd6\030\uffd6\050\uffd6\051\uffd6\001\002" +
    "\000\032\002\uffd5\003\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\027\uffd5\030\uffd5\050\uffd5\051\uffd5" +
    "\001\002\000\032\002\uffce\003\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\027\uffce\030\uffce\050\uffce" +
    "\051\uffce\001\002\000\004\054\234\001\002\000\032\002" +
    "\uffd4\003\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\027\uffd4\030\uffd4\050\uffd4\051\uffd4\001\002\000" +
    "\004\054\233\001\002\000\006\003\202\051\201\001\002" +
    "\000\024\003\061\015\071\017\065\020\050\021\066\022" +
    "\053\027\045\030\054\051\055\001\002\000\032\002\uffca" +
    "\003\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\027\uffca\030\uffca\050\uffca\051\uffca\001\002\000\006" +
    "\003\075\050\076\001\002\000\024\003\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\027\uffcc\030\uffcc\051\uffcc" +
    "\001\002\000\024\003\061\016\073\017\065\020\050\021" +
    "\066\022\053\027\045\030\054\051\055\001\002\000\004" +
    "\054\074\001\002\000\032\002\uffcb\003\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\027\uffcb\030\uffcb" +
    "\050\uffcb\051\uffcb\001\002\000\022\003\113\005\102\006" +
    "\114\024\103\025\110\026\111\051\112\055\115\001\002" +
    "\000\004\026\077\001\002\000\022\003\113\005\102\006" +
    "\114\024\103\025\110\026\111\051\112\055\115\001\002" +
    "\000\050\002\uff92\003\uff92\012\uff92\016\uff92\017\uff92\020" +
    "\uff92\021\uff92\022\uff92\023\uff92\027\uff92\030\uff92\031\uff92" +
    "\034\uff92\035\uff92\046\uff92\050\uff92\051\uff92\052\uff92\054" +
    "\uff92\001\002\000\060\002\uff97\003\uff97\012\uff97\016\uff97" +
    "\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\027\uff97\030" +
    "\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97" +
    "\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\054\uff97\001" +
    "\002\000\060\002\uff9b\003\uff9b\012\uff9b\016\uff9b\017\uff9b" +
    "\020\uff9b\021\uff9b\022\uff9b\023\uff9b\027\uff9b\030\uff9b\031" +
    "\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\046\uff9b" +
    "\047\uff9b\050\uff9b\051\uff9b\052\uff9b\054\uff9b\001\002\000" +
    "\050\002\uff91\003\uff91\012\uff91\016\uff91\017\uff91\020\uff91" +
    "\021\uff91\022\uff91\023\uff91\027\uff91\030\uff91\031\uff91\034" +
    "\uff91\035\uff91\046\uff91\050\uff91\051\uff91\052\uff91\054\uff91" +
    "\001\002\000\060\002\uff9f\003\uff9f\012\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\141\034\uff9f\035\uff9f\036\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\054\uff9f\001\002" +
    "\000\046\002\uff96\003\uff96\012\uff96\016\uff96\017\uff96\020" +
    "\uff96\021\uff96\022\uff96\023\uff96\027\uff96\030\uff96\031\uff96" +
    "\035\176\046\uff96\050\uff96\051\uff96\052\uff96\054\uff96\001" +
    "\002\000\060\002\uff9d\003\uff9d\012\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\022\uff9d\023\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\046\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\052\uff9d\054\uff9d\001\002\000" +
    "\054\002\uff87\003\uff87\012\uff87\016\uff87\017\uff87\020\uff87" +
    "\021\uff87\022\uff87\023\uff87\027\uff87\030\uff87\031\uff87\032" +
    "\136\034\uff87\035\uff87\036\134\046\uff87\050\uff87\051\uff87" +
    "\052\uff87\054\uff87\001\002\000\050\002\uff90\003\uff90\012" +
    "\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90" +
    "\027\uff90\030\uff90\031\uff90\034\uff90\035\uff90\046\uff90\050" +
    "\uff90\051\uff90\052\uff90\054\uff90\001\002\000\022\003\113" +
    "\005\102\006\114\024\103\025\110\026\111\051\112\055" +
    "\115\001\002\000\064\002\uff99\003\uff99\012\uff99\016\uff99" +
    "\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\026\145\027" +
    "\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99" +
    "\036\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053" +
    "\146\054\uff99\001\002\000\050\002\uff89\003\uff89\012\uff89" +
    "\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89\027" +
    "\uff89\030\uff89\031\uff89\034\uff89\035\uff89\046\uff89\050\uff89" +
    "\051\uff89\052\uff89\054\uff89\001\002\000\060\002\uff9c\003" +
    "\uff9c\012\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\054\uff9c\001\002\000\016\005\102\006\114\024" +
    "\125\025\126\026\127\051\112\001\002\000\050\002\uff8b" +
    "\003\uff8b\012\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022" +
    "\uff8b\023\uff8b\027\uff8b\030\uff8b\031\uff8b\034\uff8b\035\uff8b" +
    "\046\uff8b\050\uff8b\051\uff8b\052\uff8b\054\uff8b\001\002\000" +
    "\004\031\123\001\002\000\050\002\uff94\003\uff94\012\uff94" +
    "\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94\027" +
    "\uff94\030\uff94\031\uff94\034\121\035\uff94\046\uff94\050\uff94" +
    "\051\uff94\052\uff94\054\uff94\001\002\000\022\003\113\005" +
    "\102\006\114\024\103\025\110\026\111\051\112\055\115" +
    "\001\002\000\050\002\uff93\003\uff93\012\uff93\016\uff93\017" +
    "\uff93\020\uff93\021\uff93\022\uff93\023\uff93\027\uff93\030\uff93" +
    "\031\uff93\034\uff93\035\uff93\046\uff93\050\uff93\051\uff93\052" +
    "\uff93\054\uff93\001\002\000\004\054\124\001\002\000\032" +
    "\002\uffbf\003\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\027\uffbf\030\uffbf\050\uffbf\051\uffbf\001\002" +
    "\000\050\002\uff8f\003\uff8f\012\uff8f\016\uff8f\017\uff8f\020" +
    "\uff8f\021\uff8f\022\uff8f\023\uff8f\027\uff8f\030\uff8f\031\uff8f" +
    "\034\uff8f\035\uff8f\046\uff8f\050\uff8f\051\uff8f\052\uff8f\054" +
    "\uff8f\001\002\000\050\002\uff8e\003\uff8e\012\uff8e\016\uff8e" +
    "\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\027\uff8e\030" +
    "\uff8e\031\uff8e\034\uff8e\035\uff8e\046\uff8e\050\uff8e\051\uff8e" +
    "\052\uff8e\054\uff8e\001\002\000\022\003\113\005\102\006" +
    "\114\024\103\025\110\026\111\051\112\055\115\001\002" +
    "\000\050\002\uff8a\003\uff8a\012\uff8a\016\uff8a\017\uff8a\020" +
    "\uff8a\021\uff8a\022\uff8a\023\uff8a\027\uff8a\030\uff8a\031\uff8a" +
    "\034\uff8a\035\uff8a\046\uff8a\050\uff8a\051\uff8a\052\uff8a\054" +
    "\uff8a\001\002\000\014\031\135\032\136\034\uff87\035\uff87" +
    "\036\134\001\002\000\004\031\133\001\002\000\050\002" +
    "\uff8c\003\uff8c\012\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c" +
    "\022\uff8c\023\uff8c\027\uff8c\030\uff8c\031\uff8c\034\uff8c\035" +
    "\uff8c\046\uff8c\050\uff8c\051\uff8c\052\uff8c\054\uff8c\001\002" +
    "\000\012\005\102\006\114\026\137\051\112\001\002\000" +
    "\060\002\uff9a\003\uff9a\012\uff9a\016\uff9a\017\uff9a\020\uff9a" +
    "\021\uff9a\022\uff9a\023\uff9a\027\uff9a\030\uff9a\031\uff9a\032" +
    "\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\046\uff9a\047\uff9a" +
    "\050\uff9a\051\uff9a\052\uff9a\054\uff9a\001\002\000\012\005" +
    "\102\006\114\026\137\051\112\001\002\000\012\005\102" +
    "\006\114\026\137\051\112\001\002\000\060\002\uffa0\003" +
    "\uffa0\012\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0" +
    "\023\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\141\034" +
    "\uffa0\035\uffa0\036\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\052\uffa0\054\uffa0\001\002\000\012\005\102\006\114\026" +
    "\137\051\112\001\002\000\060\002\uff9e\003\uff9e\012\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\027" +
    "\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e" +
    "\036\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\054" +
    "\uff9e\001\002\000\006\031\135\032\136\001\002\000\052" +
    "\002\uff88\003\uff88\012\uff88\016\uff88\017\uff88\020\uff88\021" +
    "\uff88\022\uff88\023\uff88\027\uff88\030\uff88\031\uff88\032\136" +
    "\034\uff88\035\uff88\046\uff88\050\uff88\051\uff88\052\uff88\054" +
    "\uff88\001\002\000\026\003\113\004\151\005\154\006\114" +
    "\024\103\025\110\026\111\031\152\051\112\055\115\001" +
    "\002\000\004\051\147\001\002\000\060\002\uff98\003\uff98" +
    "\012\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023" +
    "\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98" +
    "\035\uff98\036\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052" +
    "\uff98\054\uff98\001\002\000\010\003\171\031\170\052\167" +
    "\001\002\000\010\003\164\031\163\052\162\001\002\000" +
    "\060\002\uffed\003\uffed\012\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\046\uffed\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\054\uffed\001\002\000\060\002" +
    "\uffee\003\uffee\012\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\035\uffee\036\uffee\046\uffee\047\uffee\050\uffee" +
    "\051\uffee\052\uffee\054\uffee\001\002\000\022\003\157\031" +
    "\156\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\052\155" +
    "\001\002\000\024\003\113\004\151\005\154\006\114\024" +
    "\103\025\110\026\111\051\112\055\115\001\002\000\060" +
    "\002\uffe8\003\uffe8\012\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\054\uffe8\001\002\000\024\003\113" +
    "\004\151\005\154\006\114\024\103\025\110\026\111\051" +
    "\112\055\115\001\002\000\060\002\uffe5\003\uffe5\012\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\054" +
    "\uffe5\001\002\000\060\002\uffeb\003\uffeb\012\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\054\uffeb\001" +
    "\002\000\024\003\113\004\151\005\154\006\114\024\103" +
    "\025\110\026\111\051\112\055\115\001\002\000\060\002" +
    "\uffe7\003\uffe7\012\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\054\uffe7\001\002\000\024\003\113\004" +
    "\151\005\154\006\114\024\103\025\110\026\111\051\112" +
    "\055\115\001\002\000\060\002\uffe4\003\uffe4\012\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\054\uffe4" +
    "\001\002\000\060\002\uffea\003\uffea\012\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\046" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\054\uffea\001\002" +
    "\000\024\003\113\004\151\005\154\006\114\024\103\025" +
    "\110\026\111\051\112\055\115\001\002\000\060\002\uffe9" +
    "\003\uffe9\012\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\046\uffe9\047\uffe9\050\uffe9\051" +
    "\uffe9\052\uffe9\054\uffe9\001\002\000\024\003\113\004\151" +
    "\005\154\006\114\024\103\025\110\026\111\051\112\055" +
    "\115\001\002\000\060\002\uffe6\003\uffe6\012\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\054\uffe6\001" +
    "\002\000\060\002\uffec\003\uffec\012\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\046\uffec" +
    "\047\uffec\050\uffec\051\uffec\052\uffec\054\uffec\001\002\000" +
    "\004\031\175\001\002\000\050\002\uff8d\003\uff8d\012\uff8d" +
    "\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\027" +
    "\uff8d\030\uff8d\031\uff8d\034\uff8d\035\uff8d\046\uff8d\050\uff8d" +
    "\051\uff8d\052\uff8d\054\uff8d\001\002\000\022\003\113\005" +
    "\102\006\114\024\103\025\110\026\111\051\112\055\115" +
    "\001\002\000\050\002\uff95\003\uff95\012\uff95\016\uff95\017" +
    "\uff95\020\uff95\021\uff95\022\uff95\023\uff95\027\uff95\030\uff95" +
    "\031\uff95\034\121\035\uff95\046\uff95\050\uff95\051\uff95\052" +
    "\uff95\054\uff95\001\002\000\032\002\uffbe\003\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\027\uffbe\030" +
    "\uffbe\050\uffbe\051\uffbe\001\002\000\006\003\211\037\212" +
    "\001\002\000\004\037\203\001\002\000\012\005\102\006" +
    "\114\026\137\051\112\001\002\000\006\032\136\047\205" +
    "\001\002\000\012\005\102\006\114\026\137\051\112\001" +
    "\002\000\006\012\207\032\136\001\002\000\024\003\061" +
    "\015\071\017\065\020\050\021\066\022\053\027\045\030" +
    "\054\051\055\001\002\000\032\002\uffc3\003\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\027\uffc3\030" +
    "\uffc3\050\uffc3\051\uffc3\001\002\000\012\005\102\006\114" +
    "\026\137\051\112\001\002\000\012\005\102\006\114\026" +
    "\137\051\112\001\002\000\010\003\215\032\136\047\214" +
    "\001\002\000\012\005\102\006\114\026\137\051\112\001" +
    "\002\000\012\005\102\006\114\026\137\051\112\001\002" +
    "\000\006\012\217\032\136\001\002\000\024\003\061\015" +
    "\071\017\065\020\050\021\066\022\053\027\045\030\054" +
    "\051\055\001\002\000\032\002\uffc1\003\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\027\uffc1\030\uffc1" +
    "\050\uffc1\051\uffc1\001\002\000\010\003\223\012\222\032" +
    "\136\001\002\000\024\003\061\015\071\017\065\020\050" +
    "\021\066\022\053\027\045\030\054\051\055\001\002\000" +
    "\024\003\061\015\071\017\065\020\050\021\066\022\053" +
    "\027\045\030\054\051\055\001\002\000\032\002\uffc0\003" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\027\uffc0\030\uffc0\050\uffc0\051\uffc0\001\002\000\032\002" +
    "\uffc4\003\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\027\uffc4\030\uffc4\050\uffc4\051\uffc4\001\002\000" +
    "\006\032\136\047\227\001\002\000\012\005\102\006\114" +
    "\026\137\051\112\001\002\000\006\012\231\032\136\001" +
    "\002\000\024\003\061\015\071\017\065\020\050\021\066" +
    "\022\053\027\045\030\054\051\055\001\002\000\032\002" +
    "\uffc2\003\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\027\uffc2\030\uffc2\050\uffc2\051\uffc2\001\002\000" +
    "\032\002\uffd1\003\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\027\uffd1\030\uffd1\050\uffd1\051\uffd1\001" +
    "\002\000\032\002\uffd2\003\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\027\uffd2\030\uffd2\050\uffd2\051" +
    "\uffd2\001\002\000\024\003\113\004\244\005\102\006\114" +
    "\024\103\025\110\026\111\051\112\055\115\001\002\000" +
    "\004\051\237\001\002\000\004\037\240\001\002\000\024" +
    "\003\113\004\242\005\102\006\114\024\103\025\110\026" +
    "\111\051\112\055\115\001\002\000\004\054\uffa2\001\002" +
    "\000\004\054\uffa3\001\002\000\004\054\uffa4\001\002\000" +
    "\004\054\uffa5\001\002\000\004\004\264\001\002\000\004" +
    "\004\247\001\002\000\010\003\251\031\252\052\250\001" +
    "\002\000\006\003\256\051\255\001\002\000\004\051\253" +
    "\001\002\000\004\054\uffb9\001\002\000\004\031\254\001" +
    "\002\000\004\054\uffb4\001\002\000\006\031\260\053\261" +
    "\001\002\000\004\031\257\001\002\000\004\054\uffb3\001" +
    "\002\000\004\054\uffb8\001\002\000\004\051\262\001\002" +
    "\000\004\031\263\001\002\000\004\054\uffb7\001\002\000" +
    "\006\031\266\052\265\001\002\000\004\051\267\001\002" +
    "\000\004\054\uffb6\001\002\000\004\031\270\001\002\000" +
    "\004\054\uffb5\001\002\000\006\003\272\046\273\001\002" +
    "\000\024\003\061\015\071\017\065\020\050\021\066\022" +
    "\053\027\045\030\054\051\055\001\002\000\024\003\061" +
    "\015\071\017\065\020\050\021\066\022\053\027\045\030" +
    "\054\051\055\001\002\000\032\002\uffc9\003\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\275\027\uffc9\030" +
    "\uffc9\050\uffc9\051\uffc9\001\002\000\024\003\061\015\071" +
    "\017\065\020\050\021\066\022\053\027\045\030\054\051" +
    "\055\001\002\000\032\002\uffc8\003\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\023\uffc8\027\uffc8\030\uffc8\050" +
    "\uffc8\051\uffc8\001\002\000\032\002\uffc7\003\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\027\uffc7\030" +
    "\uffc7\050\uffc7\051\uffc7\001\002\000\032\002\uffcf\003\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\027" +
    "\uffcf\030\uffcf\050\uffcf\051\uffcf\001\002\000\012\003\ufff3" +
    "\010\ufff3\011\ufff3\015\ufff3\001\002\000\006\003\304\012" +
    "\303\001\002\000\024\003\061\015\071\017\065\020\050" +
    "\021\066\022\053\027\045\030\054\051\055\001\002\000" +
    "\024\003\061\015\071\017\065\020\050\021\066\022\053" +
    "\027\045\030\054\051\055\001\002\000\032\002\uffc5\003" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\027\uffc5\030\uffc5\050\uffc5\051\uffc5\001\002\000\032\002" +
    "\uffc6\003\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\027\uffc6\030\uffc6\050\uffc6\051\uffc6\001\002\000" +
    "\032\002\uffd0\003\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\027\uffd0\030\uffd0\050\uffd0\051\uffd0\001" +
    "\002\000\004\051\321\001\002\000\006\003\313\051\312" +
    "\001\002\000\006\031\315\053\316\001\002\000\004\031" +
    "\314\001\002\000\004\054\uffba\001\002\000\004\054\uffbd" +
    "\001\002\000\004\051\317\001\002\000\004\031\320\001" +
    "\002\000\004\054\uffbc\001\002\000\004\031\322\001\002" +
    "\000\004\054\uffbb\001\002\000\006\003\030\051\026\001" +
    "\002\000\016\003\035\041\041\042\040\043\037\045\034" +
    "\051\033\001\002\000\006\031\327\052\326\001\002\000" +
    "\006\003\030\051\026\001\002\000\014\003\uffde\013\uffde" +
    "\015\uffde\040\uffde\051\uffde\001\002\000\014\003\uffdf\013" +
    "\uffdf\015\uffdf\040\uffdf\051\uffdf\001\002\000\014\003\uffe0" +
    "\013\uffe0\015\uffe0\040\uffe0\051\uffe0\001\002\000\016\003" +
    "\035\041\041\042\040\043\037\045\034\051\033\001\002" +
    "\000\010\013\012\015\uffa6\051\uffa6\001\002\000\006\015" +
    "\335\051\014\001\002\000\024\003\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\027\uffcc\030\uffcc\051\uffcc\001" +
    "\002\000\024\003\061\016\337\017\065\020\050\021\066" +
    "\022\053\027\045\030\054\051\055\001\002\000\004\054" +
    "\340\001\002\000\012\003\ufff2\010\ufff2\011\ufff2\015\ufff2" +
    "\001\002\000\006\003\030\051\026\001\002\000\016\003" +
    "\035\041\041\042\040\043\037\045\034\051\033\001\002" +
    "\000\020\003\uffdd\013\uffdd\015\uffdd\031\345\040\uffdd\051" +
    "\uffdd\052\344\001\002\000\006\003\030\051\026\001\002" +
    "\000\014\003\uffe1\013\uffe1\015\uffe1\040\uffe1\051\uffe1\001" +
    "\002\000\014\003\uffe2\013\uffe2\015\uffe2\040\uffe2\051\uffe2" +
    "\001\002\000\014\003\uffe3\013\uffe3\015\uffe3\040\uffe3\051" +
    "\uffe3\001\002\000\010\003\352\031\351\051\026\001\002" +
    "\000\006\003\u0101\040\u0102\001\002\000\006\040\372\052" +
    "\323\001\002\000\006\003\354\040\355\001\002\000\016" +
    "\003\035\041\041\042\040\043\037\045\034\051\033\001" +
    "\002\000\016\003\035\041\041\042\040\043\037\045\034" +
    "\051\033\001\002\000\010\013\012\015\uffa6\051\uffa6\001" +
    "\002\000\006\015\360\051\014\001\002\000\024\003\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\027\uffcc\030" +
    "\uffcc\051\uffcc\001\002\000\024\003\061\016\362\017\065" +
    "\020\050\021\066\022\053\027\045\030\054\051\055\001" +
    "\002\000\004\054\363\001\002\000\012\003\ufff5\010\ufff5" +
    "\011\ufff5\015\ufff5\001\002\000\010\013\012\015\uffa6\051" +
    "\uffa6\001\002\000\006\015\366\051\014\001\002\000\024" +
    "\003\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\027" +
    "\uffcc\030\uffcc\051\uffcc\001\002\000\024\003\061\016\370" +
    "\017\065\020\050\021\066\022\053\027\045\030\054\051" +
    "\055\001\002\000\004\054\371\001\002\000\012\003\ufff0" +
    "\010\ufff0\011\ufff0\015\ufff0\001\002\000\016\003\035\041" +
    "\041\042\040\043\037\045\034\051\033\001\002\000\014" +
    "\013\012\015\uffa6\031\327\051\uffa6\052\326\001\002\000" +
    "\006\015\375\051\014\001\002\000\024\003\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\027\uffcc\030\uffcc\051" +
    "\uffcc\001\002\000\024\003\061\016\377\017\065\020\050" +
    "\021\066\022\053\027\045\030\054\051\055\001\002\000" +
    "\004\054\u0100\001\002\000\012\003\ufff1\010\ufff1\011\ufff1" +
    "\015\ufff1\001\002\000\016\003\035\041\041\042\040\043" +
    "\037\045\034\051\033\001\002\000\016\003\035\041\041" +
    "\042\040\043\037\045\034\051\033\001\002\000\010\013" +
    "\012\015\uffa6\051\uffa6\001\002\000\006\015\u0105\051\014" +
    "\001\002\000\024\003\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\027\uffcc\030\uffcc\051\uffcc\001\002\000\024" +
    "\003\061\016\u0107\017\065\020\050\021\066\022\053\027" +
    "\045\030\054\051\055\001\002\000\004\054\u0108\001\002" +
    "\000\012\003\ufff4\010\ufff4\011\ufff4\015\ufff4\001\002\000" +
    "\010\013\012\015\uffa6\051\uffa6\001\002\000\006\015\u010b" +
    "\051\014\001\002\000\024\003\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\027\uffcc\030\uffcc\051\uffcc\001\002" +
    "\000\024\003\061\016\u010d\017\065\020\050\021\066\022" +
    "\053\027\045\030\054\051\055\001\002\000\004\054\u010e" +
    "\001\002\000\012\003\uffef\010\uffef\011\uffef\015\uffef\001" +
    "\002\000\006\003\ufffb\015\ufffb\001\002\000\024\003\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\027\uffcc\030" +
    "\uffcc\051\uffcc\001\002\000\024\003\061\016\u0112\017\065" +
    "\020\050\021\066\022\053\027\045\030\054\051\055\001" +
    "\002\000\004\054\u0113\001\002\000\004\002\uffff\001\002" +
    "\000\004\026\u0115\001\002\000\010\003\u0117\031\u0116\051" +
    "\026\001\002\000\010\013\012\015\uffa6\051\uffa6\001\002" +
    "\000\014\013\012\015\uffa6\040\324\051\uffa6\052\323\001" +
    "\002\000\012\003\u011a\013\012\015\uffa6\051\uffa6\001\002" +
    "\000\006\015\u0120\051\014\001\002\000\010\013\012\015" +
    "\uffa6\051\uffa6\001\002\000\006\015\u011c\051\014\001\002" +
    "\000\024\003\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\027\uffcc\030\uffcc\051\uffcc\001\002\000\024\003\061" +
    "\016\u011e\017\065\020\050\021\066\022\053\027\045\030" +
    "\054\051\055\001\002\000\004\054\u011f\001\002\000\012" +
    "\003\ufff6\010\ufff6\011\ufff6\015\ufff6\001\002\000\024\003" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\027\uffcc" +
    "\030\uffcc\051\uffcc\001\002\000\024\003\061\016\u0122\017" +
    "\065\020\050\021\066\022\053\027\045\030\054\051\055" +
    "\001\002\000\004\054\u0123\001\002\000\012\003\ufff9\010" +
    "\ufff9\011\ufff9\015\ufff9\001\002\000\006\015\u0125\051\014" +
    "\001\002\000\024\003\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\027\uffcc\030\uffcc\051\uffcc\001\002\000\024" +
    "\003\061\016\u0127\017\065\020\050\021\066\022\053\027" +
    "\045\030\054\051\055\001\002\000\004\054\u0128\001\002" +
    "\000\012\003\ufff7\010\ufff7\011\ufff7\015\ufff7\001\002\000" +
    "\006\015\u012a\051\014\001\002\000\024\003\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\027\uffcc\030\uffcc\051" +
    "\uffcc\001\002\000\024\003\061\016\u012c\017\065\020\050" +
    "\021\066\022\053\027\045\030\054\051\055\001\002\000" +
    "\004\054\u012d\001\002\000\012\003\ufff8\010\ufff8\011\ufff8" +
    "\015\ufff8\001\002\000\006\003\ufffc\015\ufffc\001\002\000" +
    "\004\051\u0134\001\002\000\016\003\uffb2\010\uffb2\011\uffb2" +
    "\015\uffb2\016\uffb2\051\uffb2\001\002\000\016\003\035\041" +
    "\041\042\040\043\037\045\034\051\033\001\002\000\004" +
    "\054\u0133\001\002\000\016\003\uffb0\010\uffb0\011\uffb0\015" +
    "\uffb0\016\uffb0\051\uffb0\001\002\000\006\040\u0131\052\u012f" +
    "\001\002\000\016\003\uffb1\010\uffb1\011\uffb1\015\uffb1\016" +
    "\uffb1\051\uffb1\001\002\000\014\003\uffa7\010\uffa7\011\uffa7" +
    "\015\uffa7\051\uffa7\001\002\000\004\037\u013d\001\002\000" +
    "\006\016\uffac\051\u0137\001\002\000\004\016\u013a\001\002" +
    "\000\004\054\u013b\001\002\000\016\003\uffaf\010\uffaf\011" +
    "\uffaf\013\uffaf\015\uffaf\051\uffaf\001\002\000\004\016\uffad" +
    "\001\002\000\004\044\u013e\001\002\000\004\015\u013f\001" +
    "\002\000\006\016\uffa9\051\uffa9\001\002\000\006\016\u0142" +
    "\051\014\001\002\000\006\016\uffaa\051\uffaa\001\002\000" +
    "\004\054\u0143\001\002\000\006\016\uffab\051\uffab\001\002" +
    "\000\016\003\uffa6\010\uffa6\011\uffa6\013\012\015\uffa6\051" +
    "\uffa6\001\002\000\014\003\ufffa\010\022\011\017\015\ufffa" +
    "\051\014\001\002\000\006\003\u0147\015\u0148\001\002\000" +
    "\024\003\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\027\uffcc\030\uffcc\051\uffcc\001\002\000\026\002\uffcc\003" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\027\uffcc" +
    "\030\uffcc\051\uffcc\001\002\000\026\002\ufffd\003\061\016" +
    "\u014a\017\065\020\050\021\066\022\053\027\045\030\054" +
    "\051\055\001\002\000\004\054\u014b\001\002\000\004\002" +
    "\001\001\002\000\024\003\061\016\u014d\017\065\020\050" +
    "\021\066\022\053\027\045\030\054\051\055\001\002\000" +
    "\004\054\u014e\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014d\000\004\030\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\u0143\001\001\000\004\040\010" +
    "\001\001\000\006\041\u0138\042\u0137\001\001\000\004\006" +
    "\012\001\001\000\004\025\u0135\001\001\000\012\025\015" +
    "\031\014\032\020\033\017\001\001\000\004\026\u012f\001" +
    "\001\000\010\031\014\032\020\033\u012d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\031" +
    "\014\032\020\033\u010e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\015\001\001\000\004\015\043\001\001\000\024" +
    "\014\045\017\056\020\057\021\062\022\055\023\061\024" +
    "\063\027\046\034\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\106\004\105\005" +
    "\103\007\077\010\115\011\301\012\117\013\104\034\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\106\004\105\005\103\007\077\010\115\011\270\012\117" +
    "\013\104\034\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\066\016\067" +
    "\017\056\020\057\021\062\022\055\023\061\024\063\027" +
    "\046\034\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\071\001\001\000\024\014\045\017\056\020" +
    "\057\021\062\022\055\023\061\024\063\027\046\034\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\106\004\105\005\103\007\077\010\115\011\177\012\117" +
    "\013\104\034\100\001\001\000\002\001\001\000\024\003" +
    "\106\004\105\005\103\007\077\010\115\011\116\012\117" +
    "\013\104\034\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\130\004\105\005\103\007\077" +
    "\010\115\011\173\012\117\013\104\034\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\106\004\105\005\103\010\127\034\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\106\004\105\005\103\007\121\010\115\034\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\130\004" +
    "\105\005\103\007\077\010\115\011\131\012\117\013\104" +
    "\034\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\143\004\105" +
    "\005\103\034\100\001\001\000\002\001\001\000\010\004" +
    "\105\005\137\034\100\001\001\000\012\003\142\004\105" +
    "\005\103\034\100\001\001\000\002\001\001\000\006\004" +
    "\141\034\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\106\004\105\005\103\007" +
    "\077\010\115\011\147\012\117\013\104\034\100\036\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\106\004\105\005\103\007" +
    "\077\010\115\011\147\012\117\013\104\034\100\036\160" +
    "\001\001\000\002\001\001\000\026\003\106\004\105\005" +
    "\103\007\077\010\115\011\147\012\117\013\104\034\100" +
    "\036\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\106\004\105\005\103\007\077\010\115\011\147" +
    "\012\117\013\104\034\100\036\165\001\001\000\002\001" +
    "\001\000\026\003\106\004\105\005\103\007\077\010\115" +
    "\011\147\012\117\013\104\034\100\036\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\106\004\105" +
    "\005\103\007\077\010\115\011\147\012\117\013\104\034" +
    "\100\036\172\001\001\000\002\001\001\000\026\003\106" +
    "\004\105\005\103\007\077\010\115\011\147\012\117\013" +
    "\104\034\100\036\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\106\004\105\005\103\007\077\010\115\012\176\034\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\203\004\105\005\103" +
    "\034\100\001\001\000\002\001\001\000\012\003\205\004" +
    "\105\005\103\034\100\001\001\000\002\001\001\000\026" +
    "\014\066\016\207\017\056\020\057\021\062\022\055\023" +
    "\061\024\063\027\046\034\051\001\001\000\002\001\001" +
    "\000\012\003\225\004\105\005\103\034\100\001\001\000" +
    "\012\003\212\004\105\005\103\034\100\001\001\000\002" +
    "\001\001\000\012\003\220\004\105\005\103\034\100\001" +
    "\001\000\012\003\215\004\105\005\103\034\100\001\001" +
    "\000\002\001\001\000\026\014\066\016\217\017\056\020" +
    "\057\021\062\022\055\023\061\024\063\027\046\034\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\014" +
    "\066\016\224\017\056\020\057\021\062\022\055\023\061" +
    "\024\063\027\046\034\051\001\001\000\026\014\066\016" +
    "\223\017\056\020\057\021\062\022\055\023\061\024\063" +
    "\027\046\034\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\227\004\105\005\103" +
    "\034\100\001\001\000\002\001\001\000\026\014\066\016" +
    "\231\017\056\020\057\021\062\022\055\023\061\024\063" +
    "\027\046\034\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\106\004\105\005\103" +
    "\007\077\010\115\011\242\012\117\013\104\034\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\106" +
    "\004\105\005\103\007\077\010\115\011\240\012\117\013" +
    "\104\034\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\066\016\276\017\056\020\057\021\062" +
    "\022\055\023\061\024\063\027\046\034\051\001\001\000" +
    "\026\014\066\016\273\017\056\020\057\021\062\022\055" +
    "\023\061\024\063\027\046\034\051\001\001\000\002\001" +
    "\001\000\026\014\066\016\275\017\056\020\057\021\062" +
    "\022\055\023\061\024\063\027\046\034\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\014\066\016\305\017" +
    "\056\020\057\021\062\022\055\023\061\024\063\027\046" +
    "\034\051\001\001\000\026\014\066\016\304\017\056\020" +
    "\057\021\062\022\055\023\061\024\063\027\046\034\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\330\001\001\000" +
    "\004\037\324\001\001\000\002\001\001\000\004\035\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\332\001\001\000\004\006\333\001\001" +
    "\000\004\025\015\001\001\000\004\015\335\001\001\000" +
    "\024\014\045\017\056\020\057\021\062\022\055\023\061" +
    "\024\063\027\046\034\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\346\001\001\000\004\037\342" +
    "\001\001\000\002\001\001\000\004\035\345\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\352\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\363\001\001\000\004\037\355" +
    "\001\001\000\004\006\356\001\001\000\004\025\015\001" +
    "\001\000\004\015\360\001\001\000\024\014\045\017\056" +
    "\020\057\021\062\022\055\023\061\024\063\027\046\034" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\364\001\001\000\004\025\015\001\001\000\004\015" +
    "\366\001\001\000\024\014\045\017\056\020\057\021\062" +
    "\022\055\023\061\024\063\027\046\034\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\372\001\001" +
    "\000\004\006\373\001\001\000\004\025\015\001\001\000" +
    "\004\015\375\001\001\000\024\014\045\017\056\020\057" +
    "\021\062\022\055\023\061\024\063\027\046\034\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\u0108" +
    "\001\001\000\004\037\u0102\001\001\000\004\006\u0103\001" +
    "\001\000\004\025\015\001\001\000\004\015\u0105\001\001" +
    "\000\024\014\045\017\056\020\057\021\062\022\055\023" +
    "\061\024\063\027\046\034\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u0109\001\001\000\004\025" +
    "\015\001\001\000\004\015\u010b\001\001\000\024\014\045" +
    "\017\056\020\057\021\062\022\055\023\061\024\063\027" +
    "\046\034\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u0110\001\001\000\024\014" +
    "\045\017\056\020\057\021\062\022\055\023\061\024\063" +
    "\027\046\034\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\u0117\001\001\000\004" +
    "\006\u0128\001\001\000\004\006\u0123\001\001\000\004\006" +
    "\u0118\001\001\000\004\025\015\001\001\000\004\006\u011a" +
    "\001\001\000\004\025\015\001\001\000\004\015\u011c\001" +
    "\001\000\024\014\045\017\056\020\057\021\062\022\055" +
    "\023\061\024\063\027\046\034\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u0120\001\001\000\024" +
    "\014\045\017\056\020\057\021\062\022\055\023\061\024" +
    "\063\027\046\034\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\015\001\001\000\004\015\u0125\001" +
    "\001\000\024\014\045\017\056\020\057\021\062\022\055" +
    "\023\061\024\063\027\046\034\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\015\001\001\000\004" +
    "\015\u012a\001\001\000\024\014\045\017\056\020\057\021" +
    "\062\022\055\023\061\024\063\027\046\034\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\u0131\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\u0134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\u013b\042\u0137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u013f\001\001\000" +
    "\004\025\u0140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u0144\001\001\000\012\025" +
    "\015\031\014\032\020\033\u0145\001\001\000\002\001\001" +
    "\000\004\015\u014b\001\001\000\004\015\u0148\001\001\000" +
    "\024\014\045\017\056\020\057\021\062\022\055\023\061" +
    "\024\063\027\046\034\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\014\045\017\056\020\057\021\062" +
    "\022\055\023\061\024\063\027\046\034\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    boolean errorFlag = false;

    int fila;
    int columna;

    @Override
    public Symbol scan() throws java.lang.Exception{
        Symbol sym = getScanner().next_token();
        fila = sym.left + 1;
        columna = sym.right + 1;
        return sym;
    }
        
    @Override
	public void report_error(String message, Object info) {
        System.err.print("Syntax error: " ); 
        expected();
        System.err.println("pero se encontro el token \'" + ((Symbol)info).value + "\' en la Linea: " + (((Symbol)info).left + 1) + ", Columna: " + (((Symbol)info).right + 1) + ". " ); 
        errorFlag = true;
    }

    @Override
	public void syntax_error(Symbol s){
        System.err.println("\nError Sintactico: " ); 
        expected();
        System.err.println("\tpero se encontro el token \'" + sym.terminalNames[s.sym] + "\'\n\tLinea: " + (s.left + 1) + "\tColumna: " + (s.right + 1) + "\n" ); 
        errorFlag = true;
	}

    public void expected(){
        List<Integer> token_list = this.expected_token_ids();
        if (token_list.size() <= 0){
                token_list = this.expected_token_ids();
        }
        String expected_tokens = "";
        for (int i = 0 ; i < token_list.size(); i++){
                int id = token_list.get(i);
                if (id == 1){ 
                    continue;
                }
                String terminal_name = sym.terminalNames[id];
                if (i == token_list.size() - 1){
                    expected_tokens += terminal_name;
                }else{
                    expected_tokens += terminal_name + " , ";
                }
        }
        System.err.println("\tSe esperaba uno de los siguientes tokens: [" + expected_tokens + "] ");
    }

    public void report_fatal_error(String message, Object info) {
        errorFlag = true;
        throw new Error("Error Fatal:\nNo se pudo recuperar del problema.");
    }

    public void unrecovered_syntax_error(Symbol s) {
        errorFlag = true;
    }

    @Override
    public int error_sync_size(){
        errorFlag = true;
        return 1;
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM ID typelistrec multmultdecl funclist BEGIN statementlist END SEMCOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tlrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tlrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object tlr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Value v = new Value((String)i, fila, columna);
    ProgramNode root = new ProgramNode(v, (ArrayList<RecordNode>)tlr, d,(ArrayList<Object>)fl,(ArrayList<Object>)sl, fila, columna);
    if(!errorFlag){
        String json = root.printNode(0);
        JSONParser parser = new JSONParser();
        JSONObject obj = (JSONObject)parser.parse(json);
        System.out.println("\nJson Arbol: \n\n" + obj.toString());
        try (ObjectOutputStream writer = new ObjectOutputStream(new FileOutputStream("../Semantico/arbolito.bebe"))) {
            writer.writeObject(root);
        }
    }else{
        root.valido = false;
    }
    RESULT = root;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM error typelistrec multmultdecl funclist BEGIN statementlist END SEMCOLON 
            {
              Object RESULT =null;
		int tlrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tlrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object tlr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= PROGRAM ID typelistrec multmultdecl funclist error statementlist END SEMCOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tlrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tlrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object tlr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= PROGRAM ID typelistrec multmultdecl funclist BEGIN statementlist 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tlrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tlrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tlr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funclist ::= function funclist 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Object> funlist = (ArrayList<Object>) fl;
    funlist.add(0, f);
    RESULT = funlist;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funclist",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funclist ::= procedure funclist 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Object> funlist = (ArrayList<Object>) fl;
    funlist.add(0, p);
    RESULT = funlist;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funclist",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funclist ::= 
            {
              Object RESULT =null;
		
    RESULT = new ArrayList<Object>();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funclist",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // procedure ::= PROCEDURE ID PARIZQ params multmultdecl BEGIN statementlist END SEMCOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Value v = new Value((String)i, fila, columna);
    if(d != null){
        RESULT = new ProcedureNode(v,(ArrayList<ParamsNode>)p,d,(ArrayList<Object>)s, fila, columna);
    }else{
        ArrayList<Object> declarations = new ArrayList<Object>();
        RESULT = new ProcedureNode(v,(ArrayList<ParamsNode>)p,declarations,(ArrayList<Object>)s, fila, columna);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // procedure ::= PROCEDURE ID PARIZQ PARDER multmultdecl BEGIN statementlist END SEMCOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Value v = new Value((String)i, fila, columna);
        ArrayList<ParamsNode> params = new ArrayList<ParamsNode>();
        if(d != null){
            RESULT = new ProcedureNode(v,params,d,(ArrayList<Object>)s, fila, columna);
        }else{
            ArrayList<Object> declarations = new ArrayList<Object>();
            RESULT = new ProcedureNode(v,params,declarations,(ArrayList<Object>)s, fila, columna);
        }   
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // procedure ::= PROCEDURE ID PARIZQ error multmultdecl BEGIN statementlist END SEMCOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // procedure ::= PROCEDURE ID PARIZQ params error multmultdecl BEGIN statementlist END SEMCOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function ::= FUNCTION ID PARIZQ params COLON type multmultdecl BEGIN statementlist END SEMCOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Value v = new Value((String)i, fila, columna);
    if(d != null){
        RESULT = new FunctionNode(v,(ArrayList<ParamsNode>)p,d,(ArrayList<Object>)s,(String)t, fila, columna);
    }else{
        ArrayList<DeclNode> declarations = new ArrayList<DeclNode>();
        RESULT = new FunctionNode(v,(ArrayList<ParamsNode>)p,declarations,(ArrayList<Object>)s,(String)t, fila, columna);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= FUNCTION ID PARIZQ PARDER COLON type multmultdecl BEGIN statementlist END SEMCOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Value v = new Value((String)i, fila, columna);
        ArrayList<ParamsNode> params = new ArrayList<ParamsNode>();
        if(d != null){
            RESULT = new FunctionNode(v,params,d,(ArrayList<Object>)s,(String)t, fila, columna);
        }else{
            ArrayList<DeclNode> declarations = new ArrayList<DeclNode>();
            RESULT = new FunctionNode(v,params,declarations,(ArrayList<Object>)s,(String)t, fila, columna); 

        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function ::= FUNCTION error PARIZQ params COLON type multmultdecl BEGIN statementlist END SEMCOLON 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= FUNCTION error PARIZQ PARDER COLON type multmultdecl BEGIN statementlist END SEMCOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= FUNCTION ID PARIZQ error COLON type multmultdecl BEGIN statementlist END SEMCOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function ::= FUNCTION ID PARIZQ params error type multmultdecl BEGIN statementlist END SEMCOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function ::= FUNCTION ID PARIZQ PARDER error type multmultdecl BEGIN statementlist END SEMCOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funccall ::= ID PARIZQ attr 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new FuncCallNode(new Value((String)i, fila, columna),(ArrayList<Object>)at, fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funccall",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funccall ::= ID PARIZQ PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new FuncCallNode(new Value((String)i, fila, columna),new ArrayList<Object>(), fila, columna);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funccall",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // attr ::= rel COMA attr 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<AttrNode> attrlst = (ArrayList<AttrNode>) a;
    attrlst.add(0, new AttrNode( r , fila, columna));
    RESULT = attrlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // attr ::= CONSTCHAR COMA attr 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<AttrNode> attrlst = (ArrayList<AttrNode>) a;
    attrlst.add(0, new AttrNode(new Character( ((String) cc).charAt(0)) , fila, columna));
    RESULT = attrlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // attr ::= CONSTSTR COMA attr 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<AttrNode> attrlst = (ArrayList<AttrNode>) a;
    attrlst.add(0, new AttrNode( (String)cc , fila, columna));
    RESULT = attrlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // attr ::= rel PARDER 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<AttrNode> attrlst = new ArrayList<AttrNode>();
    attrlst.add(0, new AttrNode( r , fila, columna));
    RESULT = attrlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // attr ::= CONSTCHAR PARDER 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<AttrNode> attrlst = new ArrayList<AttrNode>();
    attrlst.add(0, new AttrNode(new Character( ((String) cc).charAt(0) ) , fila, columna));
    RESULT = attrlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // attr ::= CONSTSTR PARDER 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<AttrNode> attrlst = new ArrayList<AttrNode>();
    attrlst.add(0, new AttrNode( (String)cc , fila, columna));
    RESULT = attrlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // attr ::= rel error attr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // attr ::= CONSTCHAR error attr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // attr ::= CONSTSTR error attr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // params ::= ID COMA params 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<ParamsNode> paramlst = (ArrayList<ParamsNode>)p;
    paramlst.get(0).push( (String)i , fila, columna);
    RESULT = paramlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params ::= ID COLON type COMA params 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<ParamsNode> paramlst = (ArrayList<ParamsNode>)p;
    paramlst.add( 0, new ParamsNode( (String)t , fila, columna) );
    paramlst.get(0).push( (String)i , fila, columna);
    RESULT = paramlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // params ::= ID COLON type PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<ParamsNode> paramlst = new ArrayList<ParamsNode>();
    paramlst.add( new ParamsNode( (String)t , fila, columna) );
    paramlst.get(0).push( (String)i , fila, columna);
    RESULT = paramlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // params ::= error COMA params 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // params ::= error COLON type COMA params 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // params ::= error COLON type PARDER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // params ::= ID COLON type 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= INT 
            {
              Object RESULT =null;
		RESULT = "INT";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= CHAR 
            {
              Object RESULT =null;
		RESULT = "CHAR";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= STRING 
            {
              Object RESULT =null;
		RESULT = "STRING";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (String)i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= if 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = (IfNode)i;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= while 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = (WhileNode)w;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= for 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = (ForNode)f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= repeat 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = (RepeatNode)r;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= read SEMCOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = (ReadNode)r;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= write SEMCOLON 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = (WriteNode)w;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= assig SEMCOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = (AssigNode)a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= funccall SEMCOLON 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = (FuncCallNode)fc;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statementlist ::= statementlist statement 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ((ArrayList<Object>)sl).add(s);
    RESULT = ((ArrayList<Object>)sl);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statementlist ::= 
            {
              Object RESULT =null;
		
    RESULT = new ArrayList<Object>();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sinmultstatement ::= BEGIN statementlist END SEMCOLON 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = ((ArrayList<Object>)sl);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sinmultstatement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sinmultstatement ::= statement 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Object> retVal = new ArrayList<Object>();
    retVal.add(st);
    RESULT = retVal;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sinmultstatement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // if ::= IF rel THEN sinmultstatement 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new IfNode(r,(ArrayList<Object>)sl, fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // if ::= IF rel THEN sinmultstatement ELSE sinmultstatement 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new IfNode(r,(ArrayList<Object>)sl,(ArrayList<Object>)s, fila, columna);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // if ::= IF rel error sinmultstatement 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // while ::= WHILE rel DO sinmultstatement 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new WhileNode(r,(ArrayList<Object>)sl, fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // while ::= WHILE rel error sinmultstatement 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // for ::= FOR ID ASSIG sum TO sum DO sinmultstatement 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ml = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    AssigNode assig = new AssigNode(new Value((String)i, fila, columna),ma, fila, columna);
    RESULT = new ForNode(assig, ml, (ArrayList<Object>)sl, fila, columna);    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // for ::= FOR error ASSIG sum TO sum DO sinmultstatement 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ml = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // for ::= FOR ID error sum TO sum DO sinmultstatement 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ml = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // for ::= FOR ID ASSIG sum error sum DO sinmultstatement 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ml = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // for ::= FOR ID ASSIG sum TO sum error sinmultstatement 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ml = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // repeat ::= REPEAT sinmultstatement UNTIL PARIZQ rel PARDER SEMCOLON 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = new RepeatNode((ArrayList<Object>)sl,r, fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // repeat ::= REPEAT sinmultstatement error rel 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // read ::= READ PARIZQ ID PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new ReadNode(new Value((String)i, fila, columna), fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // read ::= READ PARIZQ ID PERIOD ID PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    String rec = ((String)i) + "." + ((String)id);
    RESULT = new ReadNode(new Value(rec, fila, columna), fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // read ::= READ error ID PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // read ::= READ PARIZQ error PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // write ::= WRITE PARIZQ CONSTSTR PARDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new WriteNode((String)s, fila, columna);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // write ::= WRITE PARIZQ CONSTSTR COMA ID PARDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new WriteNode((String)s, new Value((String)id, fila, columna), fila, columna);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // write ::= WRITE PARIZQ CONSTSTR COMA ID PERIOD ID PARDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        String rec = ((String)i) + "." + ((String)id);
        RESULT = new WriteNode((String)s, new Value(rec, fila, columna), fila, columna);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // write ::= WRITE error CONSTSTR PARDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // write ::= WRITE error CONSTSTR COMA ID PARDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // write ::= WRITE PARIZQ CONSTSTR error ID PARDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // write ::= WRITE PARIZQ CONSTSTR COMA error PARDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // decl ::= ID multdecl 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ((DeclNode)m).push((String)i, fila, columna);
    RESULT = (DeclNode)m;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // multdecl ::= COMA ID multdecl 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ((DeclNode)m).push((String)i, fila, columna);
    DeclNode retVal = (DeclNode)m;
    RESULT = retVal;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multdecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // multdecl ::= COLON type SEMCOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new DeclNode((String) t, fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multdecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // typelistrec ::= TYPE recordlst END SEMCOLON 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = (ArrayList<RecordNode>) r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typelistrec",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // typelistrec ::= 
            {
              Object RESULT =null;
		
    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typelistrec",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // recordlst ::= records recordlst 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<RecordNode> records = (ArrayList<RecordNode>) rl;
    records.add(0, (RecordNode) r);
    RESULT = records;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordlst",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // recordlst ::= records 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<RecordNode> records = new ArrayList<RecordNode>();
    records.add(0, (RecordNode) r);
    RESULT = records;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordlst",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // records ::= ID ASSIG RECORD BEGIN multmultdeclrec END SEMCOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mmdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mmdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object mmd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = new RecordNode((String) id, (ArrayList<DeclNode>)mmd, fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("records",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // multmultdeclrec ::= multmultdeclrec decl 
            {
              Object RESULT =null;
		int mmdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mmdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mmd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(mmd != null){
        if(mmd instanceof DeclNode){
            ArrayList<DeclNode> declarations = new ArrayList<DeclNode>();
            declarations.add((DeclNode)mmd);
            declarations.add((DeclNode)d);
            RESULT = declarations;
        }else if(mmd instanceof ArrayList){
            ((ArrayList<DeclNode>)mmd).add((DeclNode)d);
            RESULT = (ArrayList<DeclNode>)mmd;
        }
    }else{
        ArrayList<DeclNode> declarations = new ArrayList<DeclNode>();
        declarations.add((DeclNode)d);
        RESULT = declarations;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multmultdeclrec",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // multmultdeclrec ::= 
            {
              Object RESULT =null;
		
    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multmultdeclrec",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // multmultdecl ::= multmultdecl decl 
            {
              Object RESULT =null;
		int mmdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mmdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mmd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(mmd != null){
        if(mmd instanceof DeclNode){
            ArrayList<DeclNode> declarations = new ArrayList<DeclNode>();
            declarations.add((DeclNode)mmd);
            declarations.add((DeclNode)d);
            RESULT = declarations;
        }else if(mmd instanceof ArrayList){
            ((ArrayList<DeclNode>)mmd).add((DeclNode)d);
            RESULT = (ArrayList<DeclNode>)mmd;
        }
    }else{
        RESULT = null;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multmultdecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // multmultdecl ::= VAR decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<DeclNode> declarations = new ArrayList<DeclNode>();
    declarations.add((DeclNode)d);
    RESULT = declarations;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multmultdecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // multmultdecl ::= 
            {
              Object RESULT =null;
		
    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multmultdecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // assig ::= ID ASSIG CONSTSTR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new AssigNode(new Value((String)i, fila, columna),(String)cs, fila, columna);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // assig ::= ID ASSIG rel 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new AssigNode(new Value((String)i, fila, columna),r, fila, columna);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assig ::= ID PERIOD ID ASSIG CONSTSTR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String rec = ((String)i) + "." + ((String)id);
        RESULT = new AssigNode(new Value(rec, fila, columna),(String)cs, fila, columna);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // assig ::= ID PERIOD ID ASSIG rel 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String rec = ((String)i) + "." + ((String)id);
        RESULT = new AssigNode(new Value(rec, fila, columna),r, fila, columna);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // math ::= sum 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new MathNode(s, fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("math",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sum ::= sum OPSUM mult 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //System.out.print("llego a sum");
    RESULT = new MathSum(s, (String)o, m, fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sum ::= mult 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = m;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // mult ::= mult OPMULT num 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new MathMult(m,(String)o,n, fila, columna);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // mult ::= num 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = n;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // num ::= NUMS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Value(new Integer((String)n), fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // num ::= CONSTCHAR 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Value(new Character(((String)cc).charAt(0)), fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // num ::= PARIZQ sum PARDER 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    //////////////// AQUI SE DEBE VER QUE RETORNA MATH, SI ES UN MathNode RETORNAR MISMO MATHNODE, SINO, CREAR UN NUEVO MathNode DANDO COMO PARAMETRO m ////////////////
    RESULT = m;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // num ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // ID 
    RESULT = new Value((String)i, fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // num ::= ID PERIOD ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String rec = ((String)i) + "." + ((String)id);
    RESULT = new Value(rec, fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // num ::= funccall 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Value((FuncCallNode)fc, fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // rel ::= boolor 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = b;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // boolor ::= boolor OPOR booland 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new BoolOrNode(r,"OR",b, fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // boolor ::= booland 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = b;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // booland ::= booland OPAND bool 
            {
              Object RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object br = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new BoolAndNode(br, "AND", bl, fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booland",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // booland ::= bool 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = b;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booland",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // bool ::= TRUE 
            {
              Object RESULT =null;
		
    RESULT = new Value(new Boolean(true), fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // bool ::= FALSE 
            {
              Object RESULT =null;
		
    RESULT = new Value(new Boolean(false), fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // bool ::= NOT TRUE 
            {
              Object RESULT =null;
		
    RESULT = new Value(new Boolean(false), fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // bool ::= NOT FALSE 
            {
              Object RESULT =null;
		
    RESULT = new Value(new Boolean(true), fila, columna);
    //RESULT = new Value(b, true, fila, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // bool ::= PARIZQ rel PARDER 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // bool ::= NOT PARIZQ rel PARDER 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if(r instanceof Value){
        ((Value)r).not = true;
        RESULT = r;
    }else{
        BoolPap b = (BoolPap)r;
        b.not = true;
        RESULT = b;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // bool ::= boolmath 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = b;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // bool ::= NOT boolmath 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(r instanceof Value){
        ((Value)r).not = true;
        RESULT = r;
    }else{
        BoolPap b = (BoolPap)r;
        b.not = true;
        RESULT = b;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // bool ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // boolmath ::= sum OPREL sum 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new BoolMathNode(b, (String)o, m, fila, columna);
    //<>|=|>|<|>=|<=

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolmath",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // boolmath ::= sum 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = m;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolmath",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
