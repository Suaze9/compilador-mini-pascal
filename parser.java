
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\030\011\000\002\002\004\000\002\030" +
    "\011\000\002\030\011\000\002\030\010\000\002\033\004" +
    "\000\002\033\004\000\002\033\002\000\002\032\012\000" +
    "\002\032\012\000\002\032\012\000\002\032\013\000\002" +
    "\031\014\000\002\031\014\000\002\031\014\000\002\031" +
    "\014\000\002\031\014\000\002\031\014\000\002\031\014" +
    "\000\002\034\005\000\002\034\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\004\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\035\005\000\002\035\007\000" +
    "\002\035\006\000\002\035\005\000\002\035\007\000\002" +
    "\035\006\000\002\035\005\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\004\000\002\015\002\000\002\016\005" +
    "\000\002\016\003\000\002\017\006\000\002\017\010\000" +
    "\002\017\006\000\002\020\006\000\002\020\006\000\002" +
    "\021\012\000\002\021\012\000\002\021\012\000\002\021" +
    "\012\000\002\021\012\000\002\022\006\000\002\022\006" +
    "\000\002\023\006\000\002\023\006\000\002\023\006\000" +
    "\002\024\006\000\002\024\010\000\002\024\006\000\002" +
    "\024\010\000\002\024\010\000\002\024\010\000\002\025" +
    "\004\000\002\026\005\000\002\026\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\002\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\002\003\000\002\003\005\000\002\003\003\000\002\005" +
    "\005\000\002\005\003\000\002\004\003\000\002\004\005" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\011\003\000\002\013\005\000\002\013\003\000\002" +
    "\012\005\000\002\012\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\004\000\002\007\005" +
    "\000\002\007\003\000\002\007\003\000\002\010\003\000" +
    "\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\004\007\005\001\002\000\004\002\u0121\001" +
    "\002\000\006\003\007\050\006\001\002\000\016\003\uffac" +
    "\010\uffac\011\uffac\013\010\014\uffac\050\uffac\001\002\000" +
    "\014\010\uffac\011\uffac\013\010\014\uffac\050\uffac\001\002" +
    "\000\004\050\013\001\002\000\012\010\020\011\015\014" +
    "\ufffa\050\013\001\002\000\012\003\ufffa\010\020\011\015" +
    "\014\ufffa\001\002\000\006\037\u0113\051\u0111\001\002\000" +
    "\014\003\uffae\010\uffae\011\uffae\014\uffae\050\uffae\001\002" +
    "\000\004\050\373\001\002\000\004\014\370\001\002\000" +
    "\012\003\ufffa\010\020\011\015\014\ufffa\001\002\000\006" +
    "\003\022\050\021\001\002\000\004\025\325\001\002\000" +
    "\004\025\023\001\002\000\010\003\026\030\025\050\024" +
    "\001\002\000\006\037\317\051\316\001\002\000\004\037" +
    "\310\001\002\000\006\037\302\051\301\001\002\000\004" +
    "\037\030\001\002\000\016\003\033\040\037\041\036\042" +
    "\035\043\031\044\032\001\002\000\024\003\uffd6\010\uffd6" +
    "\011\uffd6\013\uffd6\014\uffd6\030\uffd6\037\uffd6\050\uffd6\051" +
    "\uffd6\001\002\000\024\003\uffd5\010\uffd5\011\uffd5\013\uffd5" +
    "\014\uffd5\030\uffd5\037\uffd5\050\uffd5\051\uffd5\001\002\000" +
    "\024\003\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4\030\uffd4" +
    "\037\uffd4\050\uffd4\051\uffd4\001\002\000\010\013\010\014" +
    "\uffac\050\uffac\001\002\000\024\003\uffd7\010\uffd7\011\uffd7" +
    "\013\uffd7\014\uffd7\030\uffd7\037\uffd7\050\uffd7\051\uffd7\001" +
    "\002\000\024\003\uffd8\010\uffd8\011\uffd8\013\uffd8\014\uffd8" +
    "\030\uffd8\037\uffd8\050\uffd8\051\uffd8\001\002\000\024\003" +
    "\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9\030\uffd9\037\uffd9" +
    "\050\uffd9\051\uffd9\001\002\000\006\014\041\050\013\001" +
    "\002\000\024\003\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\026\uffc9\027\uffc9\050\uffc9\001\002\000\024\003" +
    "\057\015\047\016\063\017\046\020\064\021\051\026\043" +
    "\027\052\050\053\001\002\000\006\003\271\025\272\001" +
    "\002\000\026\002\uffca\003\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\026\uffca\027\uffca\050\uffca\001\002\000" +
    "\032\002\uffcd\003\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\026\uffcd\027\uffcd\047\uffcd\050\uffcd\001" +
    "\002\000\020\003\106\006\107\023\076\024\103\025\104" +
    "\050\105\052\111\001\002\000\012\003\ufff3\010\ufff3\011" +
    "\ufff3\014\ufff3\001\002\000\032\002\uffcc\003\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\026\uffcc\027" +
    "\uffcc\047\uffcc\050\uffcc\001\002\000\020\003\106\006\107" +
    "\023\076\024\103\025\104\050\105\052\111\001\002\000" +
    "\006\003\234\025\235\001\002\000\006\025\126\036\227" +
    "\001\002\000\032\002\uffd0\003\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\026\uffd0\027\uffd0\047\uffd0" +
    "\050\uffd0\001\002\000\032\002\uffd3\003\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\026\uffd3\027\uffd3" +
    "\047\uffd3\050\uffd3\001\002\000\032\002\uffd2\003\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\026\uffd2" +
    "\027\uffd2\047\uffd2\050\uffd2\001\002\000\032\002\uffcb\003" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\026\uffcb\027\uffcb\047\uffcb\050\uffcb\001\002\000\032\002" +
    "\uffcf\003\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\026\uffcf\027\uffcf\047\uffcf\050\uffcf\001\002\000" +
    "\032\002\uffd1\003\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\026\uffd1\027\uffd1\047\uffd1\050\uffd1\001" +
    "\002\000\032\002\uffce\003\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\026\uffce\027\uffce\047\uffce\050" +
    "\uffce\001\002\000\006\003\176\050\175\001\002\000\024" +
    "\003\057\014\067\016\063\017\046\020\064\021\051\026" +
    "\043\027\052\050\053\001\002\000\032\002\uffc7\003\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\026" +
    "\uffc7\027\uffc7\047\uffc7\050\uffc7\001\002\000\006\003\072" +
    "\047\073\001\002\000\024\003\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\026\uffc9\027\uffc9\050\uffc9\001\002" +
    "\000\024\003\057\015\071\016\063\017\046\020\064\021" +
    "\051\026\043\027\052\050\053\001\002\000\032\002\uffc8" +
    "\003\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\026\uffc8\027\uffc8\047\uffc8\050\uffc8\001\002\000\020" +
    "\003\106\006\107\023\076\024\103\025\104\050\105\052" +
    "\111\001\002\000\020\003\106\006\107\023\076\024\103" +
    "\025\104\050\105\052\111\001\002\000\046\002\uff99\003" +
    "\uff99\012\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99" +
    "\022\uff99\026\uff99\027\uff99\030\uff99\033\uff99\034\uff99\045" +
    "\uff99\047\uff99\050\uff99\051\uff99\001\002\000\054\002\uff9f" +
    "\003\uff9f\012\uff91\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021" +
    "\uff9f\022\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f" +
    "\033\uff91\034\uff91\035\uff9f\045\uff91\047\uff9f\050\uff9f\051" +
    "\uff9f\001\002\000\046\002\uff98\003\uff98\012\uff98\015\uff98" +
    "\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\026\uff98\027" +
    "\uff98\030\uff98\033\uff98\034\uff98\045\uff98\047\uff98\050\uff98" +
    "\051\uff98\001\002\000\044\002\uff9d\003\uff9d\012\uff9d\015" +
    "\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\026\uff9d" +
    "\027\uff9d\030\uff9d\034\172\045\uff9d\047\uff9d\050\uff9d\051" +
    "\uff9d\001\002\000\056\002\uffa5\003\uffa5\012\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\026\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\032\170\033\uffa5\034\uffa5\035\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\001\002\000" +
    "\056\002\uffa3\003\uffa3\012\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\026\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\045\uffa3\046\uffa3" +
    "\047\uffa3\050\uffa3\051\uffa3\001\002\000\054\002\uffa7\003" +
    "\uffa7\012\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7" +
    "\022\uffa7\026\uffa7\027\uffa7\030\uffa7\031\166\033\uffa7\034" +
    "\uffa7\035\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7" +
    "\001\002\000\046\002\uff97\003\uff97\012\uff97\015\uff97\016" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\uff97\026\uff97\027\uff97" +
    "\030\uff97\033\uff97\034\uff97\045\uff97\047\uff97\050\uff97\051" +
    "\uff97\001\002\000\020\003\106\006\107\023\076\024\103" +
    "\025\104\050\105\052\111\001\002\000\056\002\uffa0\003" +
    "\uffa0\012\uff96\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\025\126\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uff96\034\uff96\035\uffa0\045\uff96\047\uffa0\050\uffa0" +
    "\051\uffa0\001\002\000\054\002\uff9e\003\uff9e\012\uff92\015" +
    "\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\026\uff9e" +
    "\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff92\034\uff92\035" +
    "\uff9e\045\uff92\047\uff9e\050\uff9e\051\uff9e\001\002\000\056" +
    "\002\uffa2\003\uffa2\012\uffa2\015\uffa2\016\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\022\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\035\uffa2\045\uffa2\046\uffa2\047" +
    "\uffa2\050\uffa2\051\uffa2\001\002\000\004\035\120\001\002" +
    "\000\020\003\106\006\107\023\076\024\103\025\104\050" +
    "\105\052\111\001\002\000\032\002\uffbc\003\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\026\uffbc\027" +
    "\uffbc\047\uffbc\050\uffbc\001\002\000\046\002\uff93\003\uff93" +
    "\012\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022" +
    "\uff93\026\uff93\027\uff93\030\uff93\033\uff93\034\uff93\045\uff93" +
    "\047\uff93\050\uff93\051\uff93\001\002\000\046\002\uff9b\003" +
    "\uff9b\012\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b" +
    "\022\uff9b\026\uff9b\027\uff9b\030\uff9b\033\115\034\uff9b\045" +
    "\uff9b\047\uff9b\050\uff9b\051\uff9b\001\002\000\020\003\106" +
    "\006\107\023\076\024\103\025\104\050\105\052\111\001" +
    "\002\000\046\002\uff9a\003\uff9a\012\uff9a\015\uff9a\016\uff9a" +
    "\017\uff9a\020\uff9a\021\uff9a\022\uff9a\026\uff9a\027\uff9a\030" +
    "\uff9a\033\uff9a\034\uff9a\045\uff9a\047\uff9a\050\uff9a\051\uff9a" +
    "\001\002\000\046\002\uff95\003\uff95\012\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\026\uff95\027\uff95" +
    "\030\uff95\033\uff95\034\uff95\045\uff95\047\uff95\050\uff95\051" +
    "\uff95\001\002\000\012\003\124\006\107\025\122\050\123" +
    "\001\002\000\056\002\uff9f\003\uff9f\012\uff9f\015\uff9f\016" +
    "\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\001\002\000\012" +
    "\003\124\006\107\025\122\050\123\001\002\000\060\002" +
    "\uffa0\003\uffa0\012\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0" +
    "\021\uffa0\022\uffa0\025\126\026\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\045\uffa0\046\uffa0" +
    "\047\uffa0\050\uffa0\051\uffa0\001\002\000\056\002\uff9e\003" +
    "\uff9e\012\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\022\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e" +
    "\051\uff9e\001\002\000\046\002\uff90\003\uff90\012\uff90\015" +
    "\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\026\uff90" +
    "\027\uff90\030\uff90\033\uff90\034\uff90\045\uff90\047\uff90\050" +
    "\uff90\051\uff90\001\002\000\026\003\106\004\131\005\134" +
    "\006\107\023\076\024\103\025\104\030\132\050\105\052" +
    "\111\001\002\000\010\003\155\030\156\051\154\001\002" +
    "\000\012\003\151\030\150\035\120\051\147\001\002\000" +
    "\010\003\144\030\143\051\142\001\002\000\056\002\uffed" +
    "\003\uffed\012\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed" +
    "\033\uffed\034\uffed\035\uffed\045\uffed\046\uffed\047\uffed\050" +
    "\uffed\051\uffed\001\002\000\056\002\uffee\003\uffee\012\uffee" +
    "\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\001" +
    "\002\000\010\003\136\030\137\051\135\001\002\000\024" +
    "\003\106\004\131\005\134\006\107\023\076\024\103\025" +
    "\104\050\105\052\111\001\002\000\024\003\106\004\131" +
    "\005\134\006\107\023\076\024\103\025\104\050\105\052" +
    "\111\001\002\000\056\002\uffe6\003\uffe6\012\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\001\002\000" +
    "\056\002\uffe2\003\uffe2\012\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\001\002\000\056\002\uffea\003" +
    "\uffea\012\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea" +
    "\022\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\045\uffea\046\uffea\047\uffea\050\uffea" +
    "\051\uffea\001\002\000\024\003\106\004\131\005\134\006" +
    "\107\023\076\024\103\025\104\050\105\052\111\001\002" +
    "\000\056\002\uffe5\003\uffe5\012\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\045\uffe5\046" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\001\002\000\024\003\106" +
    "\004\131\005\134\006\107\023\076\024\103\025\104\050" +
    "\105\052\111\001\002\000\056\002\uffe1\003\uffe1\012\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\001" +
    "\002\000\056\002\uffe9\003\uffe9\012\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\026\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\045\uffe9" +
    "\046\uffe9\047\uffe9\050\uffe9\051\uffe9\001\002\000\024\003" +
    "\106\004\131\005\134\006\107\023\076\024\103\025\104" +
    "\050\105\052\111\001\002\000\056\002\uffe8\003\uffe8\012" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8" +
    "\001\002\000\024\003\106\004\131\005\134\006\107\023" +
    "\076\024\103\025\104\050\105\052\111\001\002\000\056" +
    "\002\uffe4\003\uffe4\012\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\045\uffe4\046\uffe4\047" +
    "\uffe4\050\uffe4\051\uffe4\001\002\000\056\002\uffec\003\uffec" +
    "\012\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051" +
    "\uffec\001\002\000\024\003\106\004\131\005\134\006\107" +
    "\023\076\024\103\025\104\050\105\052\111\001\002\000" +
    "\024\003\106\004\131\005\134\006\107\023\076\024\103" +
    "\025\104\050\105\052\111\001\002\000\056\002\uffe7\003" +
    "\uffe7\012\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\001\002\000\056\002\uffe3\003\uffe3\012\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\001\002" +
    "\000\056\002\uffeb\003\uffeb\012\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\001\002\000\004\030\162" +
    "\001\002\000\056\002\uffa1\003\uffa1\012\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\026\uffa1\027\uffa1" +
    "\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\045" +
    "\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\001\002\000\006" +
    "\030\162\035\120\001\002\000\004\030\165\001\002\000" +
    "\046\002\uff94\003\uff94\012\uff94\015\uff94\016\uff94\017\uff94" +
    "\020\uff94\021\uff94\022\uff94\026\uff94\027\uff94\030\uff94\033" +
    "\uff94\034\uff94\045\uff94\047\uff94\050\uff94\051\uff94\001\002" +
    "\000\012\003\124\006\107\025\122\050\123\001\002\000" +
    "\056\002\uffa6\003\uffa6\012\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\170\033\uffa6\034\uffa6\035\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\050\uffa6\051\uffa6\001\002\000\012\003\124\006" +
    "\107\025\122\050\123\001\002\000\056\002\uffa4\003\uffa4" +
    "\012\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051" +
    "\uffa4\001\002\000\020\003\106\006\107\023\076\024\103" +
    "\025\104\050\105\052\111\001\002\000\046\002\uff9c\003" +
    "\uff9c\012\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c" +
    "\022\uff9c\026\uff9c\027\uff9c\030\uff9c\033\115\034\uff9c\045" +
    "\uff9c\047\uff9c\050\uff9c\051\uff9c\001\002\000\032\002\uffbb" +
    "\003\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\026\uffbb\027\uffbb\047\uffbb\050\uffbb\001\002\000\006" +
    "\003\205\036\206\001\002\000\004\036\177\001\002\000" +
    "\012\003\124\006\107\025\122\050\123\001\002\000\004" +
    "\046\201\001\002\000\012\003\124\006\107\025\122\050" +
    "\123\001\002\000\004\012\203\001\002\000\024\003\057" +
    "\014\067\016\063\017\046\020\064\021\051\026\043\027" +
    "\052\050\053\001\002\000\032\002\uffc0\003\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\026\uffc0\027" +
    "\uffc0\047\uffc0\050\uffc0\001\002\000\012\003\124\006\107" +
    "\025\122\050\123\001\002\000\012\003\124\006\107\025" +
    "\122\050\123\001\002\000\006\003\211\046\210\001\002" +
    "\000\012\003\124\006\107\025\122\050\123\001\002\000" +
    "\012\003\124\006\107\025\122\050\123\001\002\000\004" +
    "\012\213\001\002\000\024\003\057\014\067\016\063\017" +
    "\046\020\064\021\051\026\043\027\052\050\053\001\002" +
    "\000\032\002\uffbe\003\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\026\uffbe\027\uffbe\047\uffbe\050\uffbe" +
    "\001\002\000\006\003\217\012\216\001\002\000\024\003" +
    "\057\014\067\016\063\017\046\020\064\021\051\026\043" +
    "\027\052\050\053\001\002\000\024\003\057\014\067\016" +
    "\063\017\046\020\064\021\051\026\043\027\052\050\053" +
    "\001\002\000\032\002\uffbd\003\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\026\uffbd\027\uffbd\047\uffbd" +
    "\050\uffbd\001\002\000\032\002\uffc1\003\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\026\uffc1\027\uffc1" +
    "\047\uffc1\050\uffc1\001\002\000\004\046\223\001\002\000" +
    "\012\003\124\006\107\025\122\050\123\001\002\000\004" +
    "\012\225\001\002\000\024\003\057\014\067\016\063\017" +
    "\046\020\064\021\051\026\043\027\052\050\053\001\002" +
    "\000\032\002\uffbf\003\uffbf\015\uffbf\016\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\026\uffbf\027\uffbf\047\uffbf\050\uffbf" +
    "\001\002\000\024\003\106\004\232\005\233\006\107\023" +
    "\076\024\103\025\104\050\105\052\111\001\002\000\032" +
    "\002\uffa8\003\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021" +
    "\uffa8\022\uffa8\026\uffa8\027\uffa8\047\uffa8\050\uffa8\001\002" +
    "\000\034\002\uffa9\003\uffa9\015\uffa9\016\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\022\uffa9\026\uffa9\027\uffa9\035\120\047\uffa9" +
    "\050\uffa9\001\002\000\032\002\uffab\003\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\026\uffab\027\uffab" +
    "\047\uffab\050\uffab\001\002\000\032\002\uffaa\003\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\026\uffaa" +
    "\027\uffaa\047\uffaa\050\uffaa\001\002\000\004\004\250\001" +
    "\002\000\004\004\236\001\002\000\010\003\241\030\240" +
    "\051\237\001\002\000\006\003\245\050\244\001\002\000" +
    "\032\002\uffb7\003\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\021\uffb7\022\uffb7\026\uffb7\027\uffb7\047\uffb7\050\uffb7\001" +
    "\002\000\004\050\242\001\002\000\004\030\243\001\002" +
    "\000\032\002\uffb3\003\uffb3\015\uffb3\016\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\022\uffb3\026\uffb3\027\uffb3\047\uffb3\050\uffb3" +
    "\001\002\000\004\030\247\001\002\000\004\030\246\001" +
    "\002\000\032\002\uffb2\003\uffb2\015\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\026\uffb2\027\uffb2\047\uffb2\050" +
    "\uffb2\001\002\000\032\002\uffb6\003\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\026\uffb6\027\uffb6\047" +
    "\uffb6\050\uffb6\001\002\000\006\030\252\051\251\001\002" +
    "\000\004\050\253\001\002\000\032\002\uffb5\003\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\026\uffb5" +
    "\027\uffb5\047\uffb5\050\uffb5\001\002\000\004\030\254\001" +
    "\002\000\032\002\uffb4\003\uffb4\015\uffb4\016\uffb4\017\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\026\uffb4\027\uffb4\047\uffb4\050" +
    "\uffb4\001\002\000\006\003\256\045\257\001\002\000\024" +
    "\003\057\014\067\016\063\017\046\020\064\021\051\026" +
    "\043\027\052\050\053\001\002\000\024\003\057\014\067" +
    "\016\063\017\046\020\064\021\051\026\043\027\052\050" +
    "\053\001\002\000\032\002\uffc6\003\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\261\026\uffc6\027\uffc6\047" +
    "\uffc6\050\uffc6\001\002\000\024\003\057\014\067\016\063" +
    "\017\046\020\064\021\051\026\043\027\052\050\053\001" +
    "\002\000\032\002\uffc5\003\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\026\uffc5\027\uffc5\047\uffc5\050" +
    "\uffc5\001\002\000\032\002\uffc4\003\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\021\uffc4\022\uffc4\026\uffc4\027\uffc4\047" +
    "\uffc4\050\uffc4\001\002\000\006\003\266\012\265\001\002" +
    "\000\024\003\057\014\067\016\063\017\046\020\064\021" +
    "\051\026\043\027\052\050\053\001\002\000\024\003\057" +
    "\014\067\016\063\017\046\020\064\021\051\026\043\027" +
    "\052\050\053\001\002\000\032\002\uffc2\003\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\026\uffc2\027" +
    "\uffc2\047\uffc2\050\uffc2\001\002\000\032\002\uffc3\003\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\026" +
    "\uffc3\027\uffc3\047\uffc3\050\uffc3\001\002\000\004\050\277" +
    "\001\002\000\006\003\274\050\273\001\002\000\004\030" +
    "\276\001\002\000\004\030\275\001\002\000\032\002\uffb8" +
    "\003\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\026\uffb8\027\uffb8\047\uffb8\050\uffb8\001\002\000\032" +
    "\002\uffba\003\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\026\uffba\027\uffba\047\uffba\050\uffba\001\002" +
    "\000\004\030\300\001\002\000\032\002\uffb9\003\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\026\uffb9" +
    "\027\uffb9\047\uffb9\050\uffb9\001\002\000\006\003\026\050" +
    "\024\001\002\000\016\003\033\040\037\041\036\042\035" +
    "\043\031\044\032\001\002\000\006\030\305\051\304\001" +
    "\002\000\006\003\026\050\024\001\002\000\014\003\uffdb" +
    "\013\uffdb\014\uffdb\037\uffdb\050\uffdb\001\002\000\014\003" +
    "\uffdc\013\uffdc\014\uffdc\037\uffdc\050\uffdc\001\002\000\014" +
    "\003\uffdd\013\uffdd\014\uffdd\037\uffdd\050\uffdd\001\002\000" +
    "\016\003\033\040\037\041\036\042\035\043\031\044\032" +
    "\001\002\000\010\013\010\014\uffac\050\uffac\001\002\000" +
    "\006\014\313\050\013\001\002\000\024\003\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\026\uffc9\027\uffc9\050" +
    "\uffc9\001\002\000\024\003\057\015\315\016\063\017\046" +
    "\020\064\021\051\026\043\027\052\050\053\001\002\000" +
    "\012\003\ufff2\010\ufff2\011\ufff2\014\ufff2\001\002\000\006" +
    "\003\026\050\024\001\002\000\016\003\033\040\037\041" +
    "\036\042\035\043\031\044\032\001\002\000\020\003\uffda" +
    "\013\uffda\014\uffda\030\322\037\uffda\050\uffda\051\321\001" +
    "\002\000\006\003\026\050\024\001\002\000\014\003\uffde" +
    "\013\uffde\014\uffde\037\uffde\050\uffde\001\002\000\014\003" +
    "\uffdf\013\uffdf\014\uffdf\037\uffdf\050\uffdf\001\002\000\014" +
    "\003\uffe0\013\uffe0\014\uffe0\037\uffe0\050\uffe0\001\002\000" +
    "\010\003\327\030\326\050\024\001\002\000\006\003\353" +
    "\037\354\001\002\000\006\037\345\051\301\001\002\000" +
    "\006\003\331\037\332\001\002\000\016\003\033\040\037" +
    "\041\036\042\035\043\031\044\032\001\002\000\016\003" +
    "\033\040\037\041\036\042\035\043\031\044\032\001\002" +
    "\000\010\013\010\014\uffac\050\uffac\001\002\000\006\014" +
    "\335\050\013\001\002\000\024\003\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\026\uffc9\027\uffc9\050\uffc9\001" +
    "\002\000\024\003\057\015\337\016\063\017\046\020\064" +
    "\021\051\026\043\027\052\050\053\001\002\000\012\003" +
    "\ufff5\010\ufff5\011\ufff5\014\ufff5\001\002\000\010\013\010" +
    "\014\uffac\050\uffac\001\002\000\006\014\342\050\013\001" +
    "\002\000\024\003\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\026\uffc9\027\uffc9\050\uffc9\001\002\000\024\003" +
    "\057\015\344\016\063\017\046\020\064\021\051\026\043" +
    "\027\052\050\053\001\002\000\012\003\ufff0\010\ufff0\011" +
    "\ufff0\014\ufff0\001\002\000\016\003\033\040\037\041\036" +
    "\042\035\043\031\044\032\001\002\000\014\013\010\014" +
    "\uffac\030\305\050\uffac\051\304\001\002\000\006\014\350" +
    "\050\013\001\002\000\024\003\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\026\uffc9\027\uffc9\050\uffc9\001\002" +
    "\000\024\003\057\015\352\016\063\017\046\020\064\021" +
    "\051\026\043\027\052\050\053\001\002\000\012\003\ufff1" +
    "\010\ufff1\011\ufff1\014\ufff1\001\002\000\016\003\033\040" +
    "\037\041\036\042\035\043\031\044\032\001\002\000\016" +
    "\003\033\040\037\041\036\042\035\043\031\044\032\001" +
    "\002\000\010\013\010\014\uffac\050\uffac\001\002\000\006" +
    "\014\357\050\013\001\002\000\024\003\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\026\uffc9\027\uffc9\050\uffc9" +
    "\001\002\000\024\003\057\015\361\016\063\017\046\020" +
    "\064\021\051\026\043\027\052\050\053\001\002\000\012" +
    "\003\ufff4\010\ufff4\011\ufff4\014\ufff4\001\002\000\010\013" +
    "\010\014\uffac\050\uffac\001\002\000\006\014\364\050\013" +
    "\001\002\000\024\003\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\026\uffc9\027\uffc9\050\uffc9\001\002\000\024" +
    "\003\057\015\366\016\063\017\046\020\064\021\051\026" +
    "\043\027\052\050\053\001\002\000\012\003\uffef\010\uffef" +
    "\011\uffef\014\uffef\001\002\000\006\003\ufffb\014\ufffb\001" +
    "\002\000\024\003\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\026\uffc9\027\uffc9\050\uffc9\001\002\000\024\003" +
    "\057\015\372\016\063\017\046\020\064\021\051\026\043" +
    "\027\052\050\053\001\002\000\004\002\uffff\001\002\000" +
    "\004\025\374\001\002\000\010\003\376\030\375\050\024" +
    "\001\002\000\010\013\010\014\uffac\050\uffac\001\002\000" +
    "\014\013\010\014\uffac\037\302\050\uffac\051\301\001\002" +
    "\000\012\003\u0101\013\010\014\uffac\050\uffac\001\002\000" +
    "\006\014\u0106\050\013\001\002\000\010\013\010\014\uffac" +
    "\050\uffac\001\002\000\006\014\u0103\050\013\001\002\000" +
    "\024\003\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\026\uffc9\027\uffc9\050\uffc9\001\002\000\024\003\057\015" +
    "\u0105\016\063\017\046\020\064\021\051\026\043\027\052" +
    "\050\053\001\002\000\012\003\ufff6\010\ufff6\011\ufff6\014" +
    "\ufff6\001\002\000\024\003\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\026\uffc9\027\uffc9\050\uffc9\001\002\000" +
    "\024\003\057\015\u0108\016\063\017\046\020\064\021\051" +
    "\026\043\027\052\050\053\001\002\000\012\003\ufff9\010" +
    "\ufff9\011\ufff9\014\ufff9\001\002\000\006\014\u010a\050\013" +
    "\001\002\000\024\003\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\026\uffc9\027\uffc9\050\uffc9\001\002\000\024" +
    "\003\057\015\u010c\016\063\017\046\020\064\021\051\026" +
    "\043\027\052\050\053\001\002\000\012\003\ufff7\010\ufff7" +
    "\011\ufff7\014\ufff7\001\002\000\006\014\u010e\050\013\001" +
    "\002\000\024\003\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\026\uffc9\027\uffc9\050\uffc9\001\002\000\024\003" +
    "\057\015\u0110\016\063\017\046\020\064\021\051\026\043" +
    "\027\052\050\053\001\002\000\012\003\ufff8\010\ufff8\011" +
    "\ufff8\014\ufff8\001\002\000\004\050\u0115\001\002\000\014" +
    "\003\uffb1\010\uffb1\011\uffb1\014\uffb1\050\uffb1\001\002\000" +
    "\016\003\033\040\037\041\036\042\035\043\031\044\032" +
    "\001\002\000\014\003\uffaf\010\uffaf\011\uffaf\014\uffaf\050" +
    "\uffaf\001\002\000\006\037\u0113\051\u0111\001\002\000\014" +
    "\003\uffb0\010\uffb0\011\uffb0\014\uffb0\050\uffb0\001\002\000" +
    "\006\003\ufffc\014\ufffc\001\002\000\014\003\uffad\010\uffad" +
    "\011\uffad\014\uffad\050\uffad\001\002\000\014\003\ufffa\010" +
    "\020\011\015\014\ufffa\050\013\001\002\000\006\003\u011b" +
    "\014\u011c\001\002\000\024\003\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\026\uffc9\027\uffc9\050\uffc9\001\002" +
    "\000\026\002\uffc9\003\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\026\uffc9\027\uffc9\050\uffc9\001\002\000\026" +
    "\002\ufffd\003\057\015\u011e\016\063\017\046\020\064\021" +
    "\051\026\043\027\052\050\053\001\002\000\004\002\001" +
    "\001\002\000\024\003\057\015\u0120\016\063\017\046\020" +
    "\064\021\051\026\043\027\052\050\053\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011f\000\004\030\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u0118\001\001\000\004\006\010" +
    "\001\001\000\004\025\u0117\001\001\000\012\025\013\031" +
    "\011\032\016\033\015\001\001\000\010\031\011\032\016" +
    "\033\u0116\001\001\000\004\026\u0111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\031\011" +
    "\032\016\033\366\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\013\001\001\000\004\015\041\001\001\000\024\014" +
    "\043\017\054\020\055\021\060\022\053\023\057\024\061" +
    "\027\044\034\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\107\003\101\004\100" +
    "\005\077\007\073\010\112\011\263\012\113\013\076\034" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\002\107\003\101\004\100\005\077\007\073\010\112\011" +
    "\254\012\113\013\076\034\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\014" +
    "\064\016\065\017\054\020\055\021\060\022\053\023\057" +
    "\024\061\027\044\034\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\067\001\001\000\024\014\043" +
    "\017\054\020\055\021\060\022\053\023\057\024\061\027" +
    "\044\034\047\001\001\000\002\001\001\000\026\002\107" +
    "\003\101\004\100\005\077\007\073\010\112\011\173\012" +
    "\113\013\076\034\074\001\001\000\026\002\107\003\101" +
    "\004\100\005\077\007\073\010\112\011\111\012\113\013" +
    "\076\034\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\002\162\003\101\004\100\005\077\007\073\010\112\011" +
    "\163\012\113\013\076\034\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\107\003\101\004\100\005\077\007\116\010\112" +
    "\034\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\107\003\101\004\100\005\077" +
    "\007\115\010\112\034\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\124\003\101\004\100\005\077" +
    "\034\120\001\001\000\002\001\001\000\014\002\160\003" +
    "\101\004\100\005\077\034\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\127\003" +
    "\101\004\100\005\077\007\073\010\112\011\126\012\113" +
    "\013\076\034\074\036\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\002\127\003\101\004" +
    "\100\005\077\007\073\010\112\011\126\012\113\013\076" +
    "\034\074\036\140\001\001\000\030\002\127\003\101\004" +
    "\100\005\077\007\073\010\112\011\126\012\113\013\076" +
    "\034\074\036\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\127\003\101\004\100" +
    "\005\077\007\073\010\112\011\126\012\113\013\076\034" +
    "\074\036\145\001\001\000\002\001\001\000\030\002\127" +
    "\003\101\004\100\005\077\007\073\010\112\011\126\012" +
    "\113\013\076\034\074\036\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\002\127\003\101\004\100\005" +
    "\077\007\073\010\112\011\126\012\113\013\076\034\074" +
    "\036\152\001\001\000\002\001\001\000\030\002\127\003" +
    "\101\004\100\005\077\007\073\010\112\011\126\012\113" +
    "\013\076\034\074\036\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\127\003\101\004\100\005\077" +
    "\007\073\010\112\011\126\012\113\013\076\034\074\036" +
    "\157\001\001\000\030\002\127\003\101\004\100\005\077" +
    "\007\073\010\112\011\126\012\113\013\076\034\074\036" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\100" +
    "\005\166\034\120\001\001\000\002\001\001\000\006\004" +
    "\170\034\120\001\001\000\002\001\001\000\022\002\107" +
    "\003\101\004\100\005\077\007\073\010\112\012\172\034" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\177\003\101\004" +
    "\100\005\077\034\120\001\001\000\002\001\001\000\014" +
    "\002\201\003\101\004\100\005\077\034\120\001\001\000" +
    "\002\001\001\000\026\014\064\016\203\017\054\020\055" +
    "\021\060\022\053\023\057\024\061\027\044\034\047\001" +
    "\001\000\002\001\001\000\014\002\221\003\101\004\100" +
    "\005\077\034\120\001\001\000\014\002\206\003\101\004" +
    "\100\005\077\034\120\001\001\000\002\001\001\000\014" +
    "\002\214\003\101\004\100\005\077\034\120\001\001\000" +
    "\014\002\211\003\101\004\100\005\077\034\120\001\001" +
    "\000\002\001\001\000\026\014\064\016\213\017\054\020" +
    "\055\021\060\022\053\023\057\024\061\027\044\034\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\014" +
    "\064\016\220\017\054\020\055\021\060\022\053\023\057" +
    "\024\061\027\044\034\047\001\001\000\026\014\064\016" +
    "\217\017\054\020\055\021\060\022\053\023\057\024\061" +
    "\027\044\034\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\223\003\101\004\100" +
    "\005\077\034\120\001\001\000\002\001\001\000\026\014" +
    "\064\016\225\017\054\020\055\021\060\022\053\023\057" +
    "\024\061\027\044\034\047\001\001\000\002\001\001\000" +
    "\026\002\230\003\101\004\100\005\077\007\073\010\112" +
    "\011\227\012\113\013\076\034\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\064\016\262" +
    "\017\054\020\055\021\060\022\053\023\057\024\061\027" +
    "\044\034\047\001\001\000\026\014\064\016\257\017\054" +
    "\020\055\021\060\022\053\023\057\024\061\027\044\034" +
    "\047\001\001\000\002\001\001\000\026\014\064\016\261" +
    "\017\054\020\055\021\060\022\053\023\057\024\061\027" +
    "\044\034\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\064\016\267\017\054\020" +
    "\055\021\060\022\053\023\057\024\061\027\044\034\047" +
    "\001\001\000\026\014\064\016\266\017\054\020\055\021" +
    "\060\022\053\023\057\024\061\027\044\034\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\306\001\001\000\004\037\302\001\001" +
    "\000\002\001\001\000\004\035\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\310" +
    "\001\001\000\004\006\311\001\001\000\004\025\013\001" +
    "\001\000\004\015\313\001\001\000\024\014\043\017\054" +
    "\020\055\021\060\022\053\023\057\024\061\027\044\034" +
    "\047\001\001\000\002\001\001\000\004\035\323\001\001" +
    "\000\004\037\317\001\001\000\002\001\001\000\004\035" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\327\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\337\001\001" +
    "\000\004\037\332\001\001\000\004\006\333\001\001\000" +
    "\004\025\013\001\001\000\004\015\335\001\001\000\024" +
    "\014\043\017\054\020\055\021\060\022\053\023\057\024" +
    "\061\027\044\034\047\001\001\000\002\001\001\000\004" +
    "\006\340\001\001\000\004\025\013\001\001\000\004\015" +
    "\342\001\001\000\024\014\043\017\054\020\055\021\060" +
    "\022\053\023\057\024\061\027\044\034\047\001\001\000" +
    "\002\001\001\000\004\037\345\001\001\000\004\006\346" +
    "\001\001\000\004\025\013\001\001\000\004\015\350\001" +
    "\001\000\024\014\043\017\054\020\055\021\060\022\053" +
    "\023\057\024\061\027\044\034\047\001\001\000\002\001" +
    "\001\000\004\037\361\001\001\000\004\037\354\001\001" +
    "\000\004\006\355\001\001\000\004\025\013\001\001\000" +
    "\004\015\357\001\001\000\024\014\043\017\054\020\055" +
    "\021\060\022\053\023\057\024\061\027\044\034\047\001" +
    "\001\000\002\001\001\000\004\006\362\001\001\000\004" +
    "\025\013\001\001\000\004\015\364\001\001\000\024\014" +
    "\043\017\054\020\055\021\060\022\053\023\057\024\061" +
    "\027\044\034\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\370\001\001\000\024\014\043\017\054" +
    "\020\055\021\060\022\053\023\057\024\061\027\044\034" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\376\001\001\000\004\006\u010c\001\001\000\004\006" +
    "\u0108\001\001\000\004\006\377\001\001\000\004\025\013" +
    "\001\001\000\004\006\u0101\001\001\000\004\025\013\001" +
    "\001\000\004\015\u0103\001\001\000\024\014\043\017\054" +
    "\020\055\021\060\022\053\023\057\024\061\027\044\034" +
    "\047\001\001\000\002\001\001\000\004\015\u0106\001\001" +
    "\000\024\014\043\017\054\020\055\021\060\022\053\023" +
    "\057\024\061\027\044\034\047\001\001\000\002\001\001" +
    "\000\004\025\013\001\001\000\004\015\u010a\001\001\000" +
    "\024\014\043\017\054\020\055\021\060\022\053\023\057" +
    "\024\061\027\044\034\047\001\001\000\002\001\001\000" +
    "\004\025\013\001\001\000\004\015\u010e\001\001\000\024" +
    "\014\043\017\054\020\055\021\060\022\053\023\057\024" +
    "\061\027\044\034\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\u0113\001\001\000" +
    "\002\001\001\000\004\026\u0115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\025\013\031" +
    "\011\032\016\033\u0119\001\001\000\002\001\001\000\004" +
    "\015\u011e\001\001\000\004\015\u011c\001\001\000\024\014" +
    "\043\017\054\020\055\021\060\022\053\023\057\024\061" +
    "\027\044\034\047\001\001\000\002\001\001\000\024\014" +
    "\043\017\054\020\055\021\060\022\053\023\057\024\061" +
    "\027\044\034\047\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
    @Override
	public void report_error(String message, Object info) {
        System.err.print("Syntax error: " ); 
        expected();
        System.err.println("pero se encontro el token \'" + ((Symbol)info).value + "\' en la Linea: " + (((Symbol)info).left + 1) + ", Columna: " + (((Symbol)info).right + 1) + ". " ); 
    }

    @Override
	public void syntax_error(Symbol s){
        System.err.println("Error Sintactico: " ); 
        expected();
        System.err.println("      pero se encontro el token \'" + sym.terminalNames[s.sym] + "\' en la Linea: " + (s.left + 1) + ", Columna: " + (s.right + 1) + ". \n" ); 
	}

    public void expected(){
        List<Integer> token_list = this.expected_token_ids();
        if (token_list.size() <= 0){
                token_list = this.expected_token_ids();
        }
        String expected_tokens = "";
        for (int i = 0 ; i < token_list.size(); i++){
                int id = token_list.get(i);
                if (id == 1){ //error
                    continue;
                }
                String terminal_name = sym.terminalNames[id];
                if (i == token_list.size() - 1){
                    expected_tokens += terminal_name;
                }else{
                    expected_tokens += terminal_name + " , ";
                }
        }
        System.err.println("      Se esperaba uno de los siguientes tokens: [" + expected_tokens + "] ");
    }

    public void report_fatal_error(String message, Object info) {
        //throw new Error("Error Fatal Sintactico, no se pudo recuperar del problema.");
        report_error(message,info);
        System.exit(1);
    }

    public void unrecovered_syntax_error(Symbol s) {
    }

    @Override
    public int error_sync_size(){
        return 1;
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM ID multmultdecl funclist BEGIN statementlist END 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Value v = new Value((String)i);
    ProgramNode root = new ProgramNode(v,d,(ArrayList<Object>)fl,(ArrayList<Object>)sl);
    System.out.println(root.printNode(0));
    RESULT = root;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM error multmultdecl funclist BEGIN statementlist END 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= PROGRAM ID multmultdecl funclist error statementlist END 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= PROGRAM ID multmultdecl funclist BEGIN statementlist 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funclist ::= function funclist 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Object> funlist = (ArrayList<Object>) fl;
    funlist.add(0, f);
    RESULT = funlist;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funclist",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funclist ::= procedure funclist 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Object> funlist = (ArrayList<Object>) fl;
    funlist.add(0, p);
    RESULT = funlist;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funclist",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funclist ::= 
            {
              Object RESULT =null;
		
    RESULT = new ArrayList<Object>();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funclist",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // procedure ::= PROCEDURE ID PARIZQ params multmultdecl BEGIN statementlist END 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Value v = new Value((String)i);
    if(d != null){
        RESULT = new ProcedureNode(v,(ArrayList<ParamsNode>)p,d,(ArrayList<Object>)s);
    }else{
        ArrayList<Object> declarations = new ArrayList<Object>();
        RESULT = new ProcedureNode(v,(ArrayList<ParamsNode>)p,declarations,(ArrayList<Object>)s);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // procedure ::= PROCEDURE ID PARIZQ PARDER multmultdecl BEGIN statementlist END 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Value v = new Value((String)i);
        ArrayList<ParamsNode> params = new ArrayList<ParamsNode>();
        if(d != null){
            RESULT = new ProcedureNode(v,params,d,(ArrayList<Object>)s);
        }else{
            ArrayList<Object> declarations = new ArrayList<Object>();
            RESULT = new ProcedureNode(v,params,declarations,(ArrayList<Object>)s);
        }   
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // procedure ::= PROCEDURE ID PARIZQ error multmultdecl BEGIN statementlist END 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // procedure ::= PROCEDURE ID PARIZQ params error multmultdecl BEGIN statementlist END 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function ::= FUNCTION ID PARIZQ params COLON type multmultdecl BEGIN statementlist END 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Value v = new Value((String)i);
    if(d != null){
        RESULT = new FunctionNode(v,(ArrayList<ParamsNode>)p,d,(ArrayList<Object>)s,(String)t);
    }else{
        ArrayList<Object> declarations = new ArrayList<Object>();
        RESULT = new FunctionNode(v,(ArrayList<ParamsNode>)p,declarations,(ArrayList<Object>)s,(String)t);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= FUNCTION ID PARIZQ PARDER COLON type multmultdecl BEGIN statementlist END 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Value v = new Value((String)i);
        ArrayList<ParamsNode> params = new ArrayList<ParamsNode>();
        if(d != null){
            RESULT = new FunctionNode(v,params,d,(ArrayList<Object>)s,(String)t);
        }else{
            ArrayList<Object> declarations = new ArrayList<Object>();
            RESULT = new FunctionNode(v,params,declarations,(ArrayList<Object>)s,(String)t); 

        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function ::= FUNCTION error PARIZQ params COLON type multmultdecl BEGIN statementlist END 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= FUNCTION error PARIZQ PARDER COLON type multmultdecl BEGIN statementlist END 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= FUNCTION ID PARIZQ error COLON type multmultdecl BEGIN statementlist END 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function ::= FUNCTION ID PARIZQ params error type multmultdecl BEGIN statementlist END 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function ::= FUNCTION ID PARIZQ PARDER error type multmultdecl BEGIN statementlist END 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funccall ::= ID PARIZQ attr 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new FuncCallNode(new Value((String)i),(ArrayList<Object>)at);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funccall",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funccall ::= ID PARIZQ PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new FuncCallNode(new Value((String)i),new ArrayList<Object>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funccall",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // attr ::= math COMA attr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<AttrNode> attrlst = (ArrayList<AttrNode>) a;
    attrlst.add(0, new AttrNode( m ));
    RESULT = attrlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // attr ::= rel COMA attr 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<AttrNode> attrlst = (ArrayList<AttrNode>) a;
    attrlst.add(0, new AttrNode( r ));
    RESULT = attrlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // attr ::= CONSTCHAR COMA attr 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<AttrNode> attrlst = (ArrayList<AttrNode>) a;
    attrlst.add(0, new AttrNode(new Character( ((String) cc).charAt(0) ) ));
    RESULT = attrlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // attr ::= CONSTSTR COMA attr 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<AttrNode> attrlst = (ArrayList<AttrNode>) a;
    attrlst.add(0, new AttrNode( (String)cc ));
    RESULT = attrlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // attr ::= math PARDER 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<AttrNode> attrlst = new ArrayList<AttrNode>();
    attrlst.add(0, new AttrNode( m ));
    RESULT = attrlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // attr ::= rel PARDER 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<AttrNode> attrlst = new ArrayList<AttrNode>();
    attrlst.add(0, new AttrNode( r ));
    RESULT = attrlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // attr ::= CONSTCHAR PARDER 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<AttrNode> attrlst = new ArrayList<AttrNode>();
    attrlst.add(0, new AttrNode(new Character( ((String) cc).charAt(0) ) ));
    RESULT = attrlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // attr ::= CONSTSTR PARDER 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<AttrNode> attrlst = new ArrayList<AttrNode>();
    attrlst.add(0, new AttrNode( (String)cc ));
    RESULT = attrlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // attr ::= math error attr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // attr ::= rel error attr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // attr ::= CONSTCHAR error attr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // attr ::= CONSTSTR error attr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // params ::= ID COMA params 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<ParamsNode> paramlst = (ArrayList<ParamsNode>)p;
    paramlst.get(0).push( (String)i );
    RESULT = paramlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // params ::= ID COLON type COMA params 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<ParamsNode> paramlst = (ArrayList<ParamsNode>)p;
    paramlst.add( 0, new ParamsNode( (String)t ) );
    paramlst.get(0).push( (String)i );
    RESULT = paramlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // params ::= ID COLON type PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<ParamsNode> paramlst = new ArrayList<ParamsNode>();
    paramlst.add( new ParamsNode( (String)t ) );
    paramlst.get(0).push( (String)i );
    RESULT = paramlst;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // params ::= error COMA params 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // params ::= error COLON type COMA params 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // params ::= error COLON type PARDER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // params ::= ID COLON type 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= INT 
            {
              Object RESULT =null;
		RESULT = "INT";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= CHAR 
            {
              Object RESULT =null;
		RESULT = "CHAR";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT = "BOOLEAN";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= RECORD 
            {
              Object RESULT =null;
		RESULT = "RECORD";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= STRING 
            {
              Object RESULT =null;
		RESULT = "STRING";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= if 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = (IfNode)i;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= while 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = (WhileNode)w;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= for 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = (ForNode)f;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= repeat 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = (RepeatNode)r;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= read 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = (ReadNode)r;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= write 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = (WriteNode)w;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= assig 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = (AssigNode)a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= funccall 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = (FuncCallNode)fc;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statementlist ::= statementlist statement 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ((ArrayList<Object>)sl).add(s);
    RESULT = ((ArrayList<Object>)sl);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statementlist ::= 
            {
              Object RESULT =null;
		
    RESULT = new ArrayList<Object>();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sinmultstatement ::= BEGIN statementlist END 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = ((ArrayList<Object>)sl);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sinmultstatement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sinmultstatement ::= statement 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Object> retVal = new ArrayList<Object>();
    retVal.add(st);
    RESULT = retVal;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sinmultstatement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // if ::= IF rel THEN sinmultstatement 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new IfNode(r,(ArrayList<Object>)sl);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if ::= IF rel THEN sinmultstatement ELSE sinmultstatement 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new IfNode(r,(ArrayList<Object>)sl,(ArrayList<Object>)s);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if ::= IF rel error sinmultstatement 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // while ::= WHILE rel DO sinmultstatement 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new WhileNode(r,(ArrayList<Object>)sl);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // while ::= WHILE rel error sinmultstatement 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // for ::= FOR ID ASSIG math TO math DO sinmultstatement 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ml = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    AssigNode assig = new AssigNode(new Value((String)i),ma);
    RESULT = new ForNode(assig, ml, (ArrayList<Object>)sl);    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // for ::= FOR error ASSIG math TO math DO sinmultstatement 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ml = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // for ::= FOR ID error math TO math DO sinmultstatement 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ml = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // for ::= FOR ID ASSIG math error math DO sinmultstatement 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ml = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // for ::= FOR ID ASSIG math TO math error sinmultstatement 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ml = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // repeat ::= REPEAT sinmultstatement UNTIL rel 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new RepeatNode((ArrayList<Object>)sl,r);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // repeat ::= REPEAT sinmultstatement error rel 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // read ::= READ PARIZQ ID PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new ReadNode(new Value((String)i));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // read ::= READ error ID PARDER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // read ::= READ PARIZQ error PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // write ::= WRITE PARIZQ CONSTSTR PARDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new WriteNode((String)s);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // write ::= WRITE PARIZQ CONSTSTR COMA ID PARDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new WriteNode((String)s, new Value((String)id));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // write ::= WRITE error CONSTSTR PARDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // write ::= WRITE error CONSTSTR COMA ID PARDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // write ::= WRITE PARIZQ CONSTSTR error ID PARDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // write ::= WRITE PARIZQ CONSTSTR COMA error PARDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // decl ::= ID multdecl 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ((DeclNode)m).push((String)i);
    RESULT = (DeclNode)m;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // multdecl ::= COMA ID multdecl 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ((DeclNode)m).push((String)i);
    DeclNode retVal = (DeclNode)m;
    RESULT = retVal;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multdecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // multdecl ::= COLON type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new DeclNode((String) t);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multdecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // multmultdecl ::= multmultdecl decl 
            {
              Object RESULT =null;
		int mmdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mmdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mmd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(mmd != null){
        if(mmd instanceof DeclNode){
            ArrayList<DeclNode> declarations = new ArrayList<DeclNode>();
            declarations.add((DeclNode)mmd);
            declarations.add((DeclNode)d);
            RESULT = declarations;
        }else if(mmd instanceof ArrayList){
            ((ArrayList<DeclNode>)mmd).add((DeclNode)d);
            RESULT = (ArrayList<DeclNode>)mmd;
        }
    }else{
        RESULT = null;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multmultdecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // multmultdecl ::= VAR decl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = (DeclNode)d;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multmultdecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // multmultdecl ::= 
            {
              Object RESULT =null;
		
    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multmultdecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assig ::= ID ASSIG CONSTSTR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new AssigNode(new Value((String)i),(String)cs);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assig ::= ID ASSIG CONSTCHAR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new AssigNode(new Value((String)i),new Character(cc.charAt(0)));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assig ::= ID ASSIG math 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new AssigNode(new Value((String)i),m);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assig ::= ID ASSIG rel 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new AssigNode(new Value((String)i),r);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assig",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // math ::= sum 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new MathNode(s);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("math",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sum ::= sum OPSUM mult 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //System.out.print("llego a sum");
    RESULT = new MathSum(s, (String)o, m);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sum ::= mult 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = m;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // mult ::= mult OPMULT num 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new MathMult(m,(String)o,n);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // mult ::= num 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = n;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mult",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // num ::= NUMS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Value(new Integer((String)n));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // num ::= PARIZQ math PARDER 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    //////////////// AQUI SE DEBE VER QUE RETORNA MATH, SI ES UN MathNode RETORNAR MISMO MATHNODE, SINO, CREAR UN NUEVO MathNode DANDO COMO PARAMETRO m ////////////////
    if(m instanceof MathNode){
        RESULT = m;
    }else{
        RESULT = new MathNode(m);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // num ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // ID 
    RESULT = new Value((String)i);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // num ::= funccall 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = (FuncCallNode)fc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // num ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // rel ::= boolor 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new BoolNode(b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // boolor ::= boolor OPOR booland 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new BoolOrNode(r,"OR",b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // boolor ::= booland 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = b;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // booland ::= booland OPAND bool 
            {
              Object RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object br = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new BoolAndNode(br, "AND", bl);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booland",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // booland ::= bool 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = b;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booland",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // bool ::= TRUE 
            {
              Object RESULT =null;
		
    RESULT = new Value(new Boolean(true));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // bool ::= FALSE 
            {
              Object RESULT =null;
		
    RESULT = new Value(new Boolean(false));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // bool ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Value((String)i);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // bool ::= NOT bool 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Value(b, true);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // bool ::= PARIZQ rel PARDER 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // bool ::= boolmath 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = b;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // bool ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // boolmath ::= funccall 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = (FuncCallNode)fc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolmath",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // boolmath ::= math OPREL math 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new BoolMathNode(b, (String)o, m);
    //<>|=|>|<|>=|<=

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolmath",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
