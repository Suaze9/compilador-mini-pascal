import java_cup.runtime.*;

terminal String TEXT, NUMS;
terminal FUNCTION, PROGRAM, BEGIN, END, FOR,
    WHILE, REPEAT, IF, ELSE, TRUE,
    FALSE, PARIZQ, READ, WRITE,
    PARDER, OPSUM, OPMULT, OPAO, OPREL, ASSIG,
    INT, CHAR, BOOLEAN, RECORD,
    ID, COMA, NOT;
        
non terminal Integer expr, math, sum, mult, num;
non terminal Boolean bool, boolmath, rel;

math ::= sum:s {:
    System.out.print("puto el que lo lea :v: " + s.intValue());
    RESULT = s.intValue();
:};

sum ::= sum:s OPSUM:o mult:m {:
    switch((String)o){
        case "+":{
            RESULT = s.intValue() + m.intValue();
            break;
        }
        case "-":{
            RESULT = s.intValue() - m.intValue();
            break;
        }
        default:{
            ///////////////////////////////////
            break;
        }
    }
:} 
| mult:m {:
    RESULT = m.intValue();
:};


mult ::= mult:m OPMULT:o num:n {:
    switch((String)o){
        case "*":{
            RESULT = m.intValue() * n.intValue();
            break;
        }
        case "/":
        case "div":{
            RESULT = new Integer((int)(m.intValue() / n.intValue()));
            break;
        }
        case "mod":{
            RESULT = m.intValue() % n.intValue();
            break;
        }
        default:{
            ///////////////////////////////////////////////////////
            break;
        }
    }
:}
| num:n {:
    RESULT = n.intValue();
:};

num ::= NUMS:n {:
    System.out.println("N: " + (String)n);
    RESULT = new Integer((String)n);
:}  
| PARIZQ math:m PARDER {:
    RESULT = m.intValue();
:};

rel ::= rel:r OPAO:o bool:b {:
    //<>|=|>|<|>=|<=|[aA][nN][dD]|[oO][rR]|[nN][oO][tT]
    switch((String)o){
        case "and":{
            RESULT = new Boolean(r.booleanValue() && b.booleanValue());
            break;
        }
        case "or":{
            RESULT = new Boolean(r.booleanValue() || b.booleanValue());
            break;
        }
    }
:} | bool:b {:
    RESULT = b.booleanValue();
:};

bool ::= TRUE {:
    RESULT = new Boolean(true);
:} 
| FALSE {:
    RESULT = new Boolean(false);
:}
| ID:i {:
    ///////////////////////////////////////////////////////////////////////
:}
| NOT bool:b {:
    RESULT = !b.booleanValue();
:}
| PARIZQ rel:r PARDER {:
    RESULT = r.booleanValue();
:}
| boolmath:b {:
    RESULT = b.booleanValue();
:};

boolmath ::= math:b OPREL:o math:m{:
    switch((String)o){
        case "<>":{
            RESULT = new Boolean(b.intValue() != m.intValue());
            break;
        }
        case "=":{
            RESULT = new Boolean(b.intValue() == m.intValue());
            break;
        }
        case "<":{
            RESULT = new Boolean(b.intValue() < m.intValue());
            break;
        }
        case ">":{
            RESULT = new Boolean(b.intValue() > m.intValue());
            break;
        }
        case ">=":{
            RESULT = new Boolean(b.intValue() >= m.intValue());
            break;
        }
        case "<=":{
            RESULT = new Boolean(b.intValue() <= m.intValue());
            break;
        }
        default:{
            //////////////////////////////////////////////////////////////////
            break;
        }
    }
:};

/*
S ::= P:p {:
		RESULT = p.intValue();
		System.out.println("El numero es: " + RESULT);
	:};

P ::= P:p MAS NUM:n1 NUMX NUM:n2 {:
		RESULT = new noTerminal (p.intValue() + new Integer(n1) * Math.pow(v.intValue(), new Integer(n2)), p.x)
	:}
	| V:v PUNTCOMA NUM:n1 NUMX NUM:n2 {:
		RESULT = new noTerminal(new Integer(n1) * Math.pow(v.intValue(), new Integer(n2)), v.intValue());
	:};
	
V ::= NUMX IGUAL NUM:n {:
		RESULT = new Integer(n);
	:};

*/
