import java_cup.runtime.*;

terminal String CONSTSTR, CONSTCHAR, NUMS;
terminal PROGRAM, FUNCTION, PROCEDURE, DO, VAR, BEGIN, END, FOR,
    WHILE, REPEAT, IF, ELSE, TRUE,
    FALSE, PARIZQ, READ, WRITE,
    PARDER, OPSUM, OPMULT, OPAND, OPOR, OPREL, ASSIG,
    COLON, INT, CHAR, BOOLEAN, RECORD, STRING, THEN,
    TO, UNTIL, ID, COMA, NOT;
        
non terminal Integer math, sum, mult, num, mathpar;                 //math operations
non terminal Boolean bool, boolmath, rel, booland, boolor;  //boolean operations
non terminal Object statement;          //Statement
non terminal Object statementlist;      //Statement List
non terminal Object if;                 //If block
non terminal Object ifun;               //If block unmatched
non terminal Object while;              //While cycle
non terminal Object for;                //For cycle
non terminal Object repeat;             //repeat cycle
non terminal Object read;               //read function
non terminal Object write;              //write function
non terminal Object decl;               //variable declaration
non terminal Object multdecl;           //multiple variable declaration
non terminal Object assig;              //assign value to variable
non terminal Object program;            //program start
non terminal Object function;           //function declaration
non terminal Object procedure;          //procedure declaration
non terminal Object funclist;           //list of function and procedure declarations
non terminal Object funccall;           //call a function
non terminal Object params;             //function or procedure parameters
non terminal Object attr;               //function or procedure attributes
non terminal Object type;               //variable type declaration

precedence nonassoc ELSE;
precedence nonassoc IF; 

program ::= PROGRAM ID:i decl:d funclist:fl BEGIN statementlist:sl END {::};

funclist ::= function:f funclist:fl {::}
    | procedure:p funclist:fl {::}
    | {::};

procedure ::= PROCEDURE ID:i PARIZQ params:p decl:d BEGIN statementlist:s END
    | PROCEDURE ID:i PARIZQ PARDER COLON type:t decl:d BEGIN statementlist:s END {::}; 

function ::= FUNCTION ID:i PARIZQ params:p COLON type:t decl:d BEGIN statementlist:s END
    | FUNCTION ID:i PARIZQ PARDER COLON type:t decl:d BEGIN statementlist:s END {::};

funccall ::= ID:i PARIZQ attr:at {::};

attr ::= math:m COMA attr:a {::}
    | rel:r COMA attr:a {::}
    | CONSTCHAR:cc COMA attr:a {::}
    | CONSTSTR:cc COMA attr:a {::}
    | math:m PARDER {::}
    | rel:r PARDER {::}
    | CONSTCHAR:cc PARDER{::}
    | CONSTSTR:cc PARDER{::};

params ::= ID:i COMA params:p {::}
    | ID:i COLON type:t COMA params:p {::}
    | ID:i COLON type:t PARDER {::};

type ::= INT {::}
    | CHAR {::}
    | BOOLEAN {::}
    | RECORD {::}
    | STRING {::};

statement ::= BEGIN statementlist:sl END {::}
    | if:i {::}
    | while:w {::}
    | for:f {::}
    | repeat:r {::}
    | read:r {::}
    | write:w {::}
    | assig:a {::};

statementlist ::= statementlist:sl statement:s {::}
    | {::};

if ::= IF rel:r THEN statement:s {::}
    | IF rel:r THEN statement:si ELSE statement:se {::};

while ::= WHILE rel:r DO statement:s {::};

for ::= FOR ID:i ASSIG math:ma TO math:ml DO statement:s {::};

repeat ::= REPEAT statementlist UNTIL rel:r {::};

read ::= READ PARIZQ ID:i PARDER {::};

write ::= WRITE PARIZQ CONSTSTR:s PARDER {::}
    | WRITE PARIZQ CONSTSTR:s COMA ID:id PARDER {::};

decl ::= VAR ID:i multdecl:m{::}
    | {::};

multdecl ::= COMA ID:i multdecl:m {::}
    | COLON type:t {::};

assig ::= ID:i COMA assig:a {::}
    | ID:i ASSIG CONSTSTR:cs {::}
    | ID:i ASSIG CONSTCHAR:cc {::}
    | ID:i ASSIG math:m {::}
    | ID:i ASSIG rel:r {::};

mathpar::= math:m PARDER {::};


math ::= sum:s {:
    /*
    System.out.println("puto el que lo lea :v: " + s.intValue());
    RESULT = s.intValue();
    */
:};

sum ::= sum:s OPSUM:o mult:m {:
    /*
    switch((String)o){
        case "+":{
            RESULT = s.intValue() + m.intValue();
            break;
        }
        case "-":{
            RESULT = s.intValue() - m.intValue();
            break;
        }
        default:{
            ///////////////////////////////////
            break;
        }
    }
    */
:} 
| mult:m {:
    //RESULT = m.intValue();
:};

mult ::= mult:m OPMULT:o num:n {:
    /*
    switch((String)o){
        case "*":{
            RESULT = m.intValue() * n.intValue();
            break;
        }
        case "/":
        case "div":{
            RESULT = new Integer((int)(m.intValue() / n.intValue()));
            break;
        }
        case "mod":{
            RESULT = m.intValue() % n.intValue();
            break;
        }
        default:{
            ///////////////////////////////////////////////////////
            break;
        }
    }
    */
:}
| num:n {:
    //RESULT = n.intValue();
:};

num ::= NUMS:n {:
    //System.out.println("N: " + (String)n);
    //RESULT = new Integer((String)n);
:}  
| PARIZQ math:m PARDER
{:
    //RESULT = m.intValue();
:}
| ID:i {:
    ///////////// ID ID ID ID ID ID ID ID ID ID ID ID ID ///////////
:}
| funccall:fc {::};

rel ::= boolor:b {:
    //RESULT = b;
:};

boolor ::= boolor:r OPOR:o booland:b {:
    //<>|=|>|<|>=|<=|[aA][nN][dD]|[oO][rR]|[nN][oO][tT]
    //RESULT = new Boolean(r.booleanValue() || b.booleanValue());
:}
| booland:b {:
    //RESULT = b.booleanValue();
:};

booland ::= booland:br OPAND bool:bl {:
    //RESULT = new Boolean(br.booleanValue() && bl.booleanValue());
:}
| bool:b {:
    //RESULT = b;
:};

bool ::= TRUE {:
    //RESULT = new Boolean(true);
:} 
| FALSE {:
    //RESULT = new Boolean(false);
:}
| ID:i {:
    ///////////////////////////////////////////////////////////////////////
:}
| NOT bool:b {:
    //RESULT = new Boolean(!b.booleanValue());
:}
| PARIZQ rel:r PARDER {:
    //RESULT = r;
:}
| boolmath:b {:
    //RESULT = b;
:};

boolmath ::= math:b OPREL:o math:m{:
    /*
    switch((String)o){
        case "<>":{
            RESULT = new Boolean(b.intValue() != m.intValue());
            break;
        }
        case "=":{
            RESULT = new Boolean(b.intValue() == m.intValue());
            break;
        }
        case "<":{
            RESULT = new Boolean(b.intValue() < m.intValue());
            break;
        }
        case ">":{
            RESULT = new Boolean(b.intValue() > m.intValue());
            break;
        }
        case ">=":{
            RESULT = new Boolean(b.intValue() >= m.intValue());
            break;
        }
        case "<=":{
            RESULT = new Boolean(b.intValue() <= m.intValue());
            break;
        }
        default:{
            //////////////////////////////////////////////////////////////////
            break;
        }
    }
    */
:};

/*
S ::= P:p {:
		RESULT = p.intValue();
		System.out.println("El numero es: " + RESULT);
	:};

P ::= P:p MAS NUM:n1 NUMX NUM:n2 {:
		RESULT = new noTerminal (p.intValue() + new Integer(n1) * Math.pow(v.intValue(), new Integer(n2)), p.x)
	:}
	| V:v PUNTCOMA NUM:n1 NUMX NUM:n2 {:
		RESULT = new noTerminal(new Integer(n1) * Math.pow(v.intValue(), new Integer(n2)), v.intValue());
	:};
	
V ::= NUMX IGUAL NUM:n {:
		RESULT = new Integer(n);
	:};

*/
